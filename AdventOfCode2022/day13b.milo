#import "Standard"
#import "File"
#import "String"

main :: () {
	file := cast(string) read_entire_file("day13.txt")

	Value :: struct {
		kind: enum {
			NUMBER
			LIST
		}
		using value: union {
			list: [..]*Value
			number: s64 = --
		}
	}

	values: [..]*Value

	parse :: (text: string) -> (*Value, string) {
		remaining := text
		using result := new(Value)

		if remaining[0] == '[' {
			remaining = remaining[1..]
			kind = .LIST

			while remaining[0] != ']' {
				<<array_push(*list), remaining = parse(remaining)
				if remaining[0] == ','
					remaining = remaining[1..]
			} 
			remaining = remaining[1..]
		} else {
			kind = .NUMBER
			number, remaining = read_s64(remaining) 
		}

		return result, remaining
	}

	array_add(*values, parse("[[2]]"))
	array_add(*values, parse("[[6]]"))

	while file {
		line: string

		line, file = read_line(file)
		if !line continue;
		array_add(*values, parse(line))
	}


	compare :: (left: *Value, right: *Value) -> s64 {
		if left.kind == .NUMBER && right.kind == .NUMBER {
			return right.number - left.number
		} else if left.kind == .NUMBER && right.kind == .LIST {
			list := Value.{.LIST}
			array_add(*list.list, left)

			return compare(*list, right)
		} else if right.kind == .NUMBER && left.kind == .LIST {
			list := Value.{.LIST}
			array_add(*list.list, right)

			return compare(left, *list)
		} else {
			for left.list {
				if it_index >= right.list.count
					return -1

				comparison := compare(it, right.list[it_index])
				if comparison != 0
					return comparison
			}

			if right.list.count > left.list.count {
				return 1
			}

			return 0
		}
	}

	insertion_sort(values, (a: *Value, b: *Value) -> bool { return compare(a, b) > 0})

	print_value :: (using value: *Value) {
		if kind == #complete {
			case .LIST
				print("[")
				for list {
					if it_index != 0
						print(",")
					print_value(it)
				}
				print("]")
			case .NUMBER
				print("%", number)
		}
	}

	first: u64
	second: u64

	for values {
		print_value(it)
		print("\n")
		if it.kind == .LIST && it.list.count == 1 {
			value := it.list[0]

			if value.kind == .LIST && value.list.count == 1 && value.list[0].kind == .NUMBER {
				if value.list[0].number == {
					case 2 first = it_index + 1
					case 6 second = it_index + 1
				}
			}
		}
	}

	print("%\n", first * second)
}