#import "Standard"
#import "File"
#import "String"

Monkey :: struct {
	items: [..]u64
	operation: enum {
		ADD
		MULTIPLY
		SQUARE
	}
	value: u64
	divisible: u64
	true_monkey: u64
	false_monkey: u64
}

main :: () {
	file := cast(string) read_entire_file("day11.txt")

	monkeys: [..]Monkey

	while file {
		_: string
		line: string

		line, file = read_line(file)

		if !begins_with(line, "Monkey ")
			continue;

		monkey := array_push(*monkeys)

		line, file = read_line(file)

		_, line = split_at_first(line, ": ")
		for split(line, ", ")
			array_add(*monkey.items, read_u64(it))

		line, file = read_line(file)
		_, line = split_at_first(line, "= ")

		symbols := split(line, " ")

		if symbols[1] == "+" {
			monkey.operation = .ADD
			monkey.value = read_u64(symbols[2])
		} else if symbols[2] == "old" {
			monkey.operation = .SQUARE
		} else {
			monkey.operation = .MULTIPLY
			monkey.value = read_u64(symbols[2])
		}

		line, file = read_line(file)
		_, line = split_at_first(line, "by ")
		monkey.divisible = read_u64(line)

		line, file = read_line(file)
		_, line = split_at_first(line, "monkey ")
		monkey.true_monkey = read_u64(line)

		line, file = read_line(file)
		_, line = split_at_first(line, "monkey ")
		monkey.false_monkey = read_u64(line)
	}

	inspections := new_array(u64, monkeys.count)

	modulo: u64 = 1

	for monkeys {
		modulo *= it.divisible
	}

	for 10000 {
		for * monkey: monkeys {
			inspections[it_index] += monkey.items.count

			for item: monkey.items {
				worry := item

				if monkey.operation == #complete {
					case .ADD
						worry += monkey.value
					case .MULTIPLY
						worry *= monkey.value
					case .SQUARE
						worry *= worry
				}

				worry %= modulo

				if worry % monkey.divisible == 0
					array_add(*monkeys[monkey.true_monkey].items, worry)
				else
					array_add(*monkeys[monkey.false_monkey].items, worry)
			}

			monkey.items.count = 0
		}

		if it == 0 || it == 19 || it == 999 || it == 1999 || it == 2999 || it == 3999 || it == 4999 || it == 5999 || it == 6999 || it == 7999 || it == 8999 || it == 9999 {
			print("---%---\n", it + 1)
			for inspections {
				print("%\n", it)
			}
		}
	}

	insertion_sort(inspections)
	print("% * % = %\n", inspections[inspections.count - 1], inspections[inspections.count - 2], inspections[inspections.count - 1] * inspections[inspections.count - 2])
}