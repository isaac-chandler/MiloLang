draw_text :: (x: f32, y: f32, text: string, color := f32.[1,1,1]) {
    x_ := x
    y_ := y
    
    for text {
        draw_character(*x_, *y_, it, color)
    }
}

gl_vertices:   [..]f32
gl_tex_coords: [..]f32
gl_colors:     [..]f32

draw_textured :: (rect: Rectangle, color: [3]f32, tex_rect: Rectangle) {
    draw_untextured(rect, color)
    
    array_add(*gl_tex_coords, tex_rect.left)
    array_add(*gl_tex_coords, tex_rect.top)
    array_add(*gl_tex_coords, tex_rect.left)
    array_add(*gl_tex_coords, tex_rect.bottom)
    array_add(*gl_tex_coords, tex_rect.right)
    array_add(*gl_tex_coords, tex_rect.bottom)
    array_add(*gl_tex_coords, tex_rect.right)
    array_add(*gl_tex_coords, tex_rect.top)
}

draw_untextured :: (rect: Rectangle, color: [3]f32) {
    array_add(*gl_vertices, rect.left)
    array_add(*gl_vertices, rect.top)
    array_add(*gl_vertices, rect.left)
    array_add(*gl_vertices, rect.bottom)
    array_add(*gl_vertices, rect.right)
    array_add(*gl_vertices, rect.bottom)
    array_add(*gl_vertices, rect.right)
    array_add(*gl_vertices, rect.top)
    
    array_add(*gl_colors, color[0])
    array_add(*gl_colors, color[1])
    array_add(*gl_colors, color[2])
    array_add(*gl_colors, color[0] * 0.9)
    array_add(*gl_colors, color[1] * 0.9)
    array_add(*gl_colors, color[2] * 0.9)
    array_add(*gl_colors, color[0] * 0.7)
    array_add(*gl_colors, color[1] * 0.7)
    array_add(*gl_colors, color[2] * 0.7)
    array_add(*gl_colors, color[0] * 0.8)
    array_add(*gl_colors, color[1] * 0.8)
    array_add(*gl_colors, color[2] * 0.8)
}

begin_draw :: ($textured: bool) {
    #if textured {
        glEnable(GL_TEXTURE_2D)
        glBindTexture(GL_TEXTURE_2D, font.texture_id)
        glEnableClientState(GL_TEXTURE_COORD_ARRAY)
        gl_tex_coords.count = 0
    } else {
        glDisableClientState(GL_TEXTURE_COORD_ARRAY)
        glDisable(GL_TEXTURE_2D)
    }
    
    gl_vertices.count = 0
    gl_colors.count   = 0
}

end_draw :: ($textured: bool) {
    glVertexPointer(2, GL_FLOAT, 0, gl_vertices.data)
    glColorPointer(3, GL_FLOAT, 0, gl_colors.data)
    
    #if textured {
        glTexCoordPointer(2, GL_FLOAT, 0, gl_tex_coords.data)
    }
    
    glDrawArrays(GL_QUADS, 0, cast() (gl_vertices.count / 2))
}

Font :: struct {
    ATLAS_SIZE :: 256
    FIRST_CHAR :: ' '
    LAST_CHAR  :: '~'
    texture_id: u32
    width:      f32
    height:     f32
    ascent:     f32
    descent:    f32
    line_gap:   f32
    chars: [LAST_CHAR - FIRST_CHAR + 1]stbtt_bakedchar     = --
    rgba_bitmap: [Font.ATLAS_SIZE * Font.ATLAS_SIZE * 4]u8 = --
}

#run precompute_font("Mechanical.ttf", 16)
font: *Font

precompute_font :: (filename: string, size: f32) {
    result: Font = --

    file_data, success := read_entire_file(filename)
    defer free_array(file_data)
    
    if !success {
        print("Warning: Could not load font file '%' for font generation, using existing font.bin\n", filename)
        return
    }
    
    single_channel_bitmap := new_array(u8, Font.ATLAS_SIZE * Font.ATLAS_SIZE, initialized = false)
    defer free_array(single_channel_bitmap)
    
    stbtt_BakeFontBitmap(file_data.data, 0, size, single_channel_bitmap.data, Font.ATLAS_SIZE, Font.ATLAS_SIZE, Font.FIRST_CHAR, cast() result.chars.count, result.chars.data)
   
    result.width = result.chars[0].xadvance
    
    font_info: stbtt_fontinfo
    stbtt_InitFont(*font_info, file_data.data, 0)
    
    scale := stbtt_ScaleForPixelHeight(*font_info, size)
    
    unscaled_ascent:   s32
    unscaled_descent:  s32
    unscaled_line_gap: s32
    
    stbtt_GetFontVMetrics(*font_info, *unscaled_ascent, *unscaled_descent, *unscaled_line_gap)
    
    result.ascent   = cast() unscaled_ascent   * scale
    result.descent  = cast() unscaled_descent  * scale
    result.line_gap = cast() unscaled_line_gap * scale
    result.height   = result.ascent - result.descent + result.line_gap
    
    for single_channel_bitmap {
        result.rgba_bitmap[4 * it_index + 0] = 255
        result.rgba_bitmap[4 * it_index + 1] = 255
        result.rgba_bitmap[4 * it_index + 2] = 255
        result.rgba_bitmap[4 * it_index + 3] = it
    }

    write_entire_file("font.bin", .{data = cast() *result, count = size_of(Font)})
}

load_font :: () -> bool {
    data, success := read_entire_file(get_path_relative_to_executable("font.bin"))
    
    if !success || data.count != size_of(Font)  
        return false
        
    font = cast() data.data

    glGenTextures(1, *font.texture_id)
    glBindTexture(GL_TEXTURE_2D, font.texture_id)
    
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST)
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST)
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP)
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP)
    
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, Font.ATLAS_SIZE, Font.ATLAS_SIZE, 0, GL_RGBA, GL_UNSIGNED_BYTE, font.rgba_bitmap.data)
    
    return true
}

draw_character :: (x: *f32, y: *f32, char: u8, color: [3]f32) {
    using font
    using quad: stbtt_aligned_quad = --
    
    stbtt_GetBakedQuad(chars.data, Font.ATLAS_SIZE, Font.ATLAS_SIZE, cast() (char - Font.FIRST_CHAR), x, y, *quad, 1)
    
    if char == ' '
        return;
        
    draw_textured(.{x0, y0, x1, y1}, color, .{s0, t0, s1, t1})
}

Rectangle :: struct {
    left:   f32
    top:    f32
    right:  f32
    bottom: f32
}