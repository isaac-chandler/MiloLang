enums
 - Do we allow signed enums?
 - array of names
 - array of values
 - is_indexable -> do the enum values go in order from 0..N, so the names array can be indexed directly with the enum value
 - largest_value
 - smallest_value

Constexpr
 - slices
 - bitwise casts cast(T,bit)

Ternary operator

Improve IR generators handling of larger than machine size values (currently they are just allocated multiple consecutive register numbers)
 - Maybe large values are always by pointer, similar to LLVM (probably include structs/arrays that are machine sized as well so we don't have to special case)

Syntax for partial array literals, where the remaining values are filled in with the default value 
 - maybe an option to fill with last specified value as well
   - this would give an easy way to fill an array with a certain value
 - Store array literals that are constants in the data segment instead of initializing them every time they are used

Build options
 - Custom linker command
 - Disable linker (just output obj)
 - Change output type (lib, exe, dll)
 - Disable debug info
 - Force unreferenced type info to be emitted
 
Current philosophy for order of execution is everything executes from left to right
 - Make named arguments and returns execute from left to right? (currently they will execute in the order that the arguments have in the function declaration)
   - This would require extra information to be stored on calls and would make codegen for calls slower, so may not be worth it to avoid a potential pitfall that in reality will basically never matter
     - Code that relies heavily on execution order within a single statement is probably a bad idea anyway
 - Make sure left to right works properly for multiple return values
 - Make sure left to right works properly for comma asignments/declarations
 
 

Add separate workspaces so that code run at compile time doesn't get emitted to the binary
 - Can set workspace options when creating a new workspace to give compile options that need to be known at infer time
 
Workspace options
 - Force type checking for unused declarations in modules (currently unused definitions are only checked for Runtime and the main module)

Make how the infer phase being completed is checked better

Make the error message when you try to using a #import that has been assigned to a constant show the correct location

Give compile time execution new abilities
 - Add strings to compilation
 - Receive information about program
 - Report errors and warnings

Allow multiple arguments to be varargs
Allow c varargs for external (and maybe c_call) functions

Move sleepingOnMe onto SubJob

Move ir generation to infer thread?
 - Could remove separate tracking of sizeDependencies for functions


Custom for loop iterators
 
Syntax for for loops to iterate in reverse?
 - Maybe just use a custom iterator?


Modules
 - Allow symbols to be locally scoped to a module
 - Modules searched for relative to the path to the compiler binary, instead of the working directory?


Standard modules
 - Hashtable
 - Math
 - String manipulation
 - File I/O
 - Standard basic operations -> array_add, memory allocation, printing?
 
Remove void 
 - Functions with no return will just have 0 return types
 - Would need syntax change for function pointers with no return value (could have parentheses recorded in Ast and make parenthesised type literals become function type literals)
 - Replace *void with another type that has the same operations, but doesn't have pointer syntax
   - Having pointer syntax makes it seem like it should be dereferencable
   - Pointer syntax means its not intuitive that it should be able to represent a function as well
   - Call new type something like pointer or memory


Allow symbols to be locally scoped to a file
	
Make it a compile time error to out of bounds index a static array if the index is a constant
 - Compile time error for constant negative index of normal and dynamic arrays?
 - Compile time error for things that are an array literal of normal or dynamic type

Make auto cast work with bit casts
 - cast(,bit)
 - need to update code in tryAutoCast AND getConversionCost

Make auto cast work in more places where the target type is known
 - Array type count slot
 - Array index
 - Array slice start/end
 

Compile option for runtime checking
 - Array bounds checking
 - Cast bounds checking
 - Check casts from any to a type
 - Slice bounds checking
 - Integer overflow
 - Check that if == #complete { never hits an else case (i.e. only valid enums are given)
 
 
Should this be legal

	Enum :: enum {
		A
		B
	}

	// Currently this is an error because not all control paths return a value
	is_a :: (e: Enum) -> bool {
		if e == #complete {
			case .A
				return true
			case .B
				return false
		}
	}
	
	- If this is legal than a program would be in an undefined state if an enum had an out of range value

Function inlining

Rotate operators

Allow logical shifting of signed values

Macros

C Varargs for external functions

Allow default and named arguments with function pointers

Allow comma declarations (x, y, z: f32)

Make comma assignments work for things other than function calls
 - i.e. a, b = b, a to do a swap thats not gross
 - Do we really need this, I can't think of any other use cases than a swap, if we really want this functionality, maybe just add a swap primitive i.e. #swap a, b

string representation
 - is it worth having implict conversion to utf16 C-strings (windows wide strings) and utf32 C-strings
 - utf16 and utf32 string types?

function overloading

performance
 - Profile TypeTable.cpp
 - Call infer fewer times -- significantly improved since todo orignally added but can still be better
   - graph theory
 - More fast paths for trival type inference
 - Multithread ir generator
 - Multithread coff writer?
 - Write obj faster (somehow)
 - Get rid of linker
 - Multithread type inference (nightmare nightmare nightmare)
 
 
Memory usage
 - Where could memory be freed simply
 - Minimise wasted allocations if inference yields (i.e. function/return argument sorting)

debug info
 - emit S_UDT for constant type declarations
 - emit constants
 - deal with the local function nightmare
 - emit debug info for llvm

LLVM
 - optimizations
 - Allow control of LLVM options
 - Change llvm backend to use IR instead of the ast


improve external function interface
 - parse C header files so we don't need to manually declare external functions
 
predefined constant variables
 - BUILD_WINDOWS, BUILD_LINUX, etc...
 
#tag
 - Mark an if statement as #tag, if a struct member is compared to a type, the struct will imlicitly convert to that type in the if body
 - Make it work using box type
 - Work with switch if
 
Only add top level declarations/importers as individual infer jobs? (local declarations/importers handled by inferFlattened)
 - May allow serial and implicit imports to be removed
 - Importers and Declarations must become Exprs
 - Could merge #if, #load, #import handling split across inferFlattened and inferImporter
 - Could remove implicit initializer expressions (ir generator just handles variable declarations)
 
utf8 identifiers?

Investigate LINK : fatal error LNK1285: corrupt PDB file
 - This may have been eliminated by emitting proper info for nested structs/enums (or it may now be much less common)

function polymorhpism
 - Allow overloaded functions to be passed to a polymorphic function with pattern matching for a function type
 - Allow polymorphic functions to be passed to a polymorphic function with pattern matching for a function type
 - Allow polymorphic functions to be overloaded
 - Allow $T/type to only match the polymorph if T is convertible to type
 - Allow function arguments to be baked
 - Allow fixed array length to be polymorphic
 
struct polymorhpism