#import "Windows"
#import "Standard"

Os_Window :: HWND

create_window :: (title: string, width: s32, height: s32, resizable := true) -> *Window {
    ensure_window_class_registered()
    
    window_style := WS_OVERLAPPEDWINDOW

    if !resizable {
        window_style ^= WS_THICKFRAME ^ WS_MAXIMIZEBOX
    }
    
    window_rect: RECT
    
    window_rect.top = 0
    window_rect.bottom = cast() height
    window_rect.left = 0
    window_rect.right = cast() width
    
    AdjustWindowRectEx(*window_rect, window_style)

    windows_title := to_windows_string(title)
    defer free_array(windows_title)
    
    window_handle := CreateWindowExW(lpClassName = window_class_name.data, lpWindowName = windows_title.data, dwStyle = window_style, 
        nWidth = window_rect.right - window_rect.left, nHeight = window_rect.bottom - window_rect.top, hInstance = GetModuleHandleW(null))
    
    if !window_handle
        return null

    window := new(Window)
    window.width = width
    window.height = height

    window.handle = window_handle

    SetWindowLongPtrW(window_handle, GWLP_USERDATA, cast() window)
    
    // For some reason AdjustWindowRectEx doesn't always give the correct adjustment so compare the client and window rect and apply our own adjustment accordingly
    set_window_size(window, width, height)

    return window
}

show_window :: (using window: *Window) {
    startup_info: STARTUPINFOW
    
    GetStartupInfoW(*startup_info)
    
    show_command := SW_SHOWDEFAULT
    if startup_info.dwFlags & STARTF_USESHOWWINDOW {
        show_command = cast() startup_info.wShowWindow
    }
    
    
    ShowWindow(handle, show_command)
}

set_window_size :: (using window: *Window, new_width: s32, new_height: s32) {
    client_rect: RECT = --
    GetClientRect(handle, *client_rect)
    
    window_rect: RECT = --
    GetWindowRect(handle, *window_rect)
    
    x_diff := (window_rect.right - window_rect.left) - (client_rect.right - client_rect.left)
    y_diff := (window_rect.bottom - window_rect.top) - (client_rect.bottom - client_rect.top)
    
    SetWindowPos(handle, null, 0, 0, new_width + x_diff, new_height + y_diff, SWP_NOMOVE | SWP_NOZORDER)
}

set_window_pos :: (using window: *Window, x: s32, y: s32) {
    SetWindowPos(handle, null, x, y, 0, 0, SWP_NOSIZE | SWP_NOZORDER)
}

get_window_pos :: (using window: *Window) -> (s32, s32) {
    window_rect: RECT = --
    GetWindowRect(handle, *window_rect)
    
    return window_rect.left, window_rect.top
}

bring_to_top :: (using window: *Window) {
    if IsIconic(handle) {
        ShowWindow(handle, SW_RESTORE)
    }
    SetForegroundWindow(handle)
    SetActiveWindow(handle)
}

// Does not close the window immediately
// After calling this function continue handling window events until poll events returns false
close_window :: (using window: *Window) {
    DestroyWindow(handle)
}

poll_events :: (using window: *Window) -> bool {
    if should_quit
        return false

    message: MSG = --
    
    while PeekMessageW(*message, null) {
        if message.message == WM_QUIT {
            should_quit = true
            return false
        }
        
        TranslateMessage(*message)
        DispatchMessageW(*message)
    }

    return true
}

wait_events :: (using window: *Window) -> bool {
    if should_quit
        return false
    
    message: MSG = --
    
    result := GetMessageW(*message, null)
    
    if result == 0 {
        should_quit = true
        return false
    }
    if result < 0
        return true
    
    TranslateMessage(*message)
    DispatchMessageW(*message)
    
    return poll_events(window)
}

#scope_module
registered_window_class := false
window_class_name: []u16

ensure_window_class_registered :: () -> bool{
    if registered_window_class
        return true

    window_class_name = to_windows_string("MiloWindowClass")
    window_class: WNDCLASSW
    
    window_class.style = CS_OWNDC | CS_VREDRAW | CS_HREDRAW | CS_DBLCLKS
    window_class.lpfnWndProc = window_proc
    window_class.hInstance = GetModuleHandleW(null)
    window_class.lpszClassName = window_class_name.data
    window_class.hbrBackground = null
    
    
    return cast() RegisterClassW(*window_class)
}

window_proc :: (hwnd: HWND, uMsg: MSG.Message, wParam: u64, lParam: s64) -> s64 #c_call {
    get_modifiers :: (using window: *Window) -> Modifiers {        
        modifiers: Modifiers
        
        if keys[cast(u8) Key.CONTROL]
            modifiers |= .CONTROL
        if keys[cast(u8) Key.SHIFT]
            modifiers |= .SHIFT
        if keys[cast(u8) Key.ALT]
            modifiers |= .ALT
        
        return modifiers
    }

    temp_context: Context
    push_context temp_context {
        using window := cast(*Window) GetWindowLongPtrW(hwnd, GWLP_USERDATA)
        
        x := cast(s16) lParam
        y := cast(s16) (lParam >> 16)

        if uMsg == {
            case WM_CLOSE
                if destroy_on_close
                    DestroyWindow(hwnd)
                
                array_add(*events, .{ .CLOSE })
                
            case WM_DESTROY        
                PostQuitMessage(0)
                
            case WM_PAINT
                paint: PAINTSTRUCT = --
                
                dc := BeginPaint(hwnd, *paint)
                
                if draw
                    draw()
                
                EndPaint(hwnd, *paint)
                
            case WM_SIZE #through
            case WM_SIZING
                client_rect: RECT = --
                
                GetClientRect(hwnd, *client_rect)

                width = client_rect.right - client_rect.left
                height = client_rect.bottom - client_rect.top
                
                array_add(*events, .{ .RESIZE, .{ resize = .{ width, height } }})
                
                return cast() (uMsg == WM_SIZING)
                
            case WM_LBUTTONDOWN   #through
            case WM_LBUTTONDBLCLK #through
            case WM_LBUTTONUP
                button := Key.LEFT_MOUSE
                down := uMsg != WM_LBUTTONUP
                keys[cast(u8) button] = down
                
                array_add(*events, .{.MOUSE, .{ mouse = .{ button, x, y, get_modifiers(window), down, uMsg == WM_LBUTTONDBLCLK } }})
                
            case WM_RBUTTONDOWN #through
            case WM_RBUTTONDBLCLK #through
            case WM_RBUTTONUP
                button := Key.RIGHT_MOUSE
                down := uMsg != WM_RBUTTONUP
                keys[cast(u8) button] = down
                
                array_add(*events, .{.MOUSE, .{ mouse = .{ button, x, y, get_modifiers(window), down, uMsg == WM_RBUTTONDBLCLK } }})

            case WM_MBUTTONDOWN #through
            case WM_MBUTTONDBLCLK #through
            case WM_MBUTTONUP
                button := Key.MIDDLE_MOUSE
                down := uMsg != WM_MBUTTONUP
                keys[cast(u8) button] = down
                
                array_add(*events, .{.MOUSE, .{ mouse = .{ button, x, y, get_modifiers(window), down, uMsg == WM_MBUTTONDBLCLK } }})

            case WM_XBUTTONDOWN #through
            case WM_XBUTTONDBLCLK #through
            case WM_XBUTTONUP
                button := Key.MOUSE_4

                if ((wParam >> 16) & 0xFFFF) == 2 {
                    button = .MOUSE_5
                }

                down := uMsg != WM_XBUTTONUP
                keys[cast(u8) button] = down
                
                array_add(*events, .{.MOUSE, .{ mouse = .{ button, x, y, get_modifiers(window), down, uMsg == WM_XBUTTONDBLCLK  } }})
                
            
            case WM_MOUSEMOVE
                mouse_x = x
                mouse_y = y
                
                array_add(*events, .{.MOUSE_MOVE, .{ mouse_move = .{ x, y, get_modifiers(window) } }})

            case WM_KEYDOWN #through
            case WM_KEYUP
                if wParam <= 255 {
                    key := cast(Key) wParam
                    down := uMsg == WM_KEYDOWN
                    keys[cast(u8) key] = down

                    repeat_count := lParam & 0xFFFF

                    for repeat_count
                        array_add(*events, .{.KEY, .{ key = .{ key, get_modifiers(window), down } }})

                }

            case WM_CHAR
                key := cast(Key) wParam
                down := uMsg == WM_KEYDOWN
                
                repeat_count := lParam & 0xFFFF

                for repeat_count
                    array_add(*events, .{.CHAR, .{ char = .{ cast() wParam, get_modifiers(window) } }})

            case WM_MOUSEWHEEL
                p := POINT.{x, y}
                ScreenToClient(hwnd, *p)
                
                delta := cast(s16) (wParam >> 16)

                array_add(*events, .{.SCROLL, .{ scroll = .{ 0, delta, cast() p.x, cast() p.y, get_modifiers(window) } }})


            case WM_MOUSEHWHEEL
                p := POINT.{x, y}
                ScreenToClient(hwnd, *p)
                delta := cast(s16) (wParam >> 16)

                array_add(*events, .{.SCROLL, .{ scroll = .{ delta, 0, cast() p.x, cast() p.y, get_modifiers(window) } }})


            case WM_SYSKEYDOWN #through
            case WM_SYSKEYUP {
                if wParam <= 255 {
                    key := cast(Key) wParam
                    down := uMsg == WM_SYSKEYDOWN
                    keys[cast(u8) key] = down
                    
                    modifiers := get_modifiers(window)
                    
                    if modifiers & .ALT && key == .F4 && down {
                        PostMessageW(hwnd, WM_CLOSE, 0, 0)
                    }

                    repeat_count := lParam & 0xFFFF

                    for repeat_count
                        array_add(*events, .{.KEY, .{ key = .{ key, modifiers, down } }})

                }
            }
            
            case WM_ERASEBKGND
                return 1
                
            case WM_ACTIVATE {

                if !wParam
                    for * keys {
                        <<it = false
                    }
            }
            
            else
                return DefWindowProcW(hwnd, uMsg, wParam, lParam)
        }
        
        return 0
    }
}