#import "Standard"

// TODO compiler improvement so hash and equality funcs can be strongly typed
// this requires their type to be based on the value of a previous argument which
// currently isn't supported
Table :: struct(Key: type, Value: type, load_factor := 0.7, hash_func := null, equality_func := null) {
    Slot :: struct {
        key:   Key
        value: Value
        hash:  u64
    }
    
    // Must be a power of 2 size (slot is determined by bit-masking the hash)
    slots:      []Slot
    count:      u64
    // Does not decrease when removing items until a rehash occurs
    used_slots: u64    
}

hash :: (key: $T) -> u64 {
    #if T == string {
        return hash_string(key)
    } else if T == bool || 
               #run type_info(T).tag == .INTEGER || 
                    type_info(T).tag == .POINTER || 
                    type_info(T).tag == .ENUM {
        return hash_u64(cast() key)
    } else if T == type || #run type_info(T).tag == .FUNCTION {
        return hash_u64(cast,bit(u64) key)
    } else {
        // The default hash function doesn't accept floats because we don't know how the
        // user wants to deal with weird float stuff like -0 and NaN
    
        // Cannot hash structs/arrays/floats
        #run assert(false)
        return 0
    }
}

table_insert :: (using table: *Table($K, $V), key: K, value: V) -> bool {
    maybe_rehash(table)
    slot, match, hashed := find_slot(<<table, key)
    
    if !match {
        ensure_initted(table)
    
        slot.hash = hashed
        slot.key = key
        used_slots += 1
        count += 1
        
    }
    
    slot.value = value
    return match
}

table_find :: (table: Table($K, $V), key: K) -> *V {
    if !table.count return null    
    slot, match := find_slot(table, key)
    
    if match
        return *slot.value
    else
        return null
}

table_find_or_insert :: (using table: *Table($K, $V), key: K, value: V = ..) -> *V {
    maybe_rehash(table)
    slot, match, hashed := find_slot(<<table, key)
    
    if !match {
        slot.hash = hashed
        slot.key = key
        slot.value = value
        used_slots += 1
        count += 1
        
    }
    
    return *slot.value
}

table_remove :: (using table: *Table($K, $V), key: K) -> bool {
    if !table.count return false  
    slot, match := find_slot(<<table, key)
    
    if match {
        count -= 1
        slot.hash = REMOVED_HASH
        return true
    } else
        return false
}

table_slot :: (table: Table($K, $V), slot: u64) -> *Table(K, V).Slot {
    if table.slots[slot].hash < MIN_VALID_HASH
        return null
    else
        return *table.slots[slot]
}

free_table :: (table: Table($K, $V)) {
    free_array(table.slots)
}

#scope_module

EMPTY_HASH :: 0
REMOVED_HASH :: 1
MIN_VALID_HASH :: 2

find_empty_slot :: (slots: []$T, hash: u64) -> *T {
    slot := hash & (slots.count - 1)
    
    while slots[slot].hash >= MIN_VALID_HASH {
        slot += 1
        slot &= slots.count - 1
    }
    
    return *slots[slot]
}

find_slot :: (using table: Table($K, $V), key: K) -> (slot: *Table(K, V).Slot, match: bool, hashed: u64) {
    #if hash_func {
        hashed := (cast((K) -> u64) hash_func)(key)
    } else {
        hashed := hash(key)
    }
    
    if hashed < MIN_VALID_HASH  hashed += MIN_VALID_HASH
    slot := hashed & (slots.count - 1)
    
    while slots[slot].hash != EMPTY_HASH {
        if slots[slot].hash == hashed {
            #if equality_func {
                if (cast((K, K) -> bool) equality_func)(slots[slot].key, key) {
                    return *slots[slot], true, hashed
                }
            } else {
                if slots[slot].key == key {
                    return *slots[slot], true, hashed
                }
            }
        }
    
        slot += 1
        slot &= slots.count - 1
    }
    
    return *slots[slot], false, hashed
}

maybe_rehash :: (using table: *Table($K, $V)) {
    if !slots {
        slots = new_array(Slot, 8)
        return
    }
    
    if cast() used_slots >= load_factor * cast() slots.count {
        new_slots := new_array(Slot, slots.count * 2)
        
        for slots {
            if it.hash >= MIN_VALID_HASH {
                <<find_empty_slot(new_slots, it.hash) = it
            } 
        }
        
        used_slots = count
        free_array(slots)
        table.slots = new_slots
    }
}

// https://stackoverflow.com/questions/664014/what-integer-hash-function-are-good-that-accepts-an-integer-hash-key
// TODO: More performant hash function, this one has long dependency chains with multiplies
hash_u64 :: (val: u64) -> u64 {
    x := val
    x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9
    x = (x ^ (x >> 27)) * 0x94d049bb133111eb
    x = (x ^ (x >> 31))
    return x
}

// https://stackoverflow.com/questions/7666509/hash-function-for-string
// TODO: More performant hash function, (operate on multiple characters per iteration)
hash_string :: (s: string) -> u64 {
    hash: u64 = 5381
    
    for s {
        hash = (hash * 33) ^ it
    }
    
    return hash
}