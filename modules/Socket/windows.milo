open_tcp_server :: (port: u16, max_backlog: s32 = SOMAXCONN) -> (server: Tcp_Server, #must success: bool) {
    if !sockets_start() {
        return .{}, false
    }
    
    address: *ADDRINFOA
    hints := ADDRINFOA.{
        ai_family   = AF_INET, // TODO: IPv6 support
        ai_socktype = SOCK_STREAM,
        ai_protocol = IPPROTO_TCP,
        ai_flags    = AI_PASSIVE
    }
    
    port_name: [16]u8 // Port in Winsock is a string for some reason
    u64_to_string(port, cast() port_name)
    
    if getaddrinfo(null, port_name.data, *hints, *address) {
        WSACleanup()
        return .{}, false
    }
    defer freeaddrinfo(address)
    
    server: Tcp_Server
    
    server.socket = socket(address.ai_family, address.ai_socktype, address.ai_protocol)
    if server.socket == INVALID_SOCKET {
        WSACleanup()
        return .{}, false
    }
    
    if bind(server.socket, address.ai_addr, cast() address.ai_addrlen) {
        closesocket(server.socket)
        WSACleanup()
        return .{}, false
    }
    
    if listen(server.socket, max_backlog) == SOCKET_ERROR {
        closesocket(server.socket)
        WSACleanup()
        return .{}, false
    }
    
    return server, true
}

close_tcp_server :: (server: Tcp_Server) {
    closesocket(server.socket)
    sockets_stop()
}

Tcp_Server :: struct {
    socket: SOCKET
}

Tcp_Connection :: struct {
    socket: SOCKET
}

accept_connection :: (server: Tcp_Server) -> (connection: Tcp_Connection, #must success: bool) {
    connection: Tcp_Connection
    connection.socket = accept(server.socket, null, null) // TODO: retrieve remote address info
    if connection.socket == INVALID_SOCKET {
        return .{}, false
    }
    sockets_start()
    
    return connection, true
}

close_tcp_connection :: (connection: Tcp_Connection) {
    closesocket(connection.socket)
    sockets_stop()
}

tcp_receive :: (connection: Tcp_Connection, buffer: []u8) -> (result: []u8, #must success: bool) {
    recv_count := min(buffer.count, 0x7FFF_FFFF)
    
    
    count := recv(connection.socket, buffer.data, cast() recv_count, 0)
    
    if count < 0 {
        return .{}, false
    }
    
    return .{data = buffer.data, count = cast() count}, true
}

tcp_send :: (connection: Tcp_Connection, buffer: []u8) -> bool {
    remaining := buffer
    
    // TODO: Make sure this can't infinite loop (i.e. if the connection is closed)
    while remaining {
        send_count := min(buffer.count, 0x7FFF_FFFF)
        
        count := send(connection.socket, remaining.data, cast() send_count, 0)
        if count < 0 {
            return false
        }
        
        remaining = remaining[count..]
    }
    
    return true
}

#scope_module

sockets_start :: () -> bool {
    data: WSADATA = --
    
    // Version is hardcoded for now since 2.2 is the newest version and is from 1997
    return WSAStartup(wVersionRequired = 0x0202, lpWSAData = *data) == 0
}

sockets_stop :: () {
    WSACleanup()
}

getaddrinfo :: (pNodeName: *u8, pServiceName: *u8, pHints: *ADDRINFOA, ppResult: **ADDRINFOA) -> s32 #external "Ws2_32"
freeaddrinfo :: (pAddrInfo: *ADDRINFOA) #external "Ws2_32"

WSADESCRIPTION_LEN :: 256
WSASYS_STATUS_LEN  :: 128

WSADATA :: struct {
    wVersion:     u16
    wHighVersion: u16
    iMaxSockets:  u16
    iMaxUdpDg:    u16
    lpVendorInfo: *u8
    szDescription:  [WSADESCRIPTION_LEN + 1]u8
    szSystemStatus: [WSASYS_STATUS_LEN + 1] u8
}

WSAStartup :: (wVersionRequired: u16, lpWSAData: *WSADATA) -> s32 #external "Ws2_32"
WSACleanup :: () -> s32 #external "Ws2_32"

using ADDRESS_FAMILY :: enum u32 {
    AF_UNSPEC        :: 0
    AF_UNIX          :: 1
    AF_INET          :: 2
    AF_IMPLINK       :: 3
    AF_PUP           :: 4
    AF_CHAOS         :: 5
    AF_NS            :: 6
    AF_IPX           :: AF_NS
    AF_ISO           :: 7
    AF_OSI           :: AF_ISO
    AF_ECMA          :: 8
    AF_DATAKIT       :: 9
    AF_CCITT         :: 10
    AF_SNA           :: 11
    AF_DECnet        :: 12
    AF_DLI           :: 13
    AF_LAT           :: 14
    AF_HYLINK        :: 15
    AF_APPLETALK     :: 16
    AF_NETBIOS       :: 17
    AF_VOICEVIEW     :: 18
    AF_FIREFOX       :: 19
    AF_UNKNOWN1      :: 20
    AF_BAN           :: 21
    AF_ATM           :: 22
    AF_INET6         :: 23
    AF_CLUSTER       :: 24
    AF_12844         :: 25
    AF_IRDA          :: 26
    AF_NETDES        :: 28 // Not a mistake there is no 27.
    AF_TCNPROCESS    :: 29
    AF_TCNMESSAGE    :: 30
    AF_ICLFXBM       :: 31
    AF_BTH           :: 32
    AF_LINK          :: 33
    AF_HYPERV        :: 34
}

using IPPROTO :: enum u32 {
    IPPROTO_IP       :: 0
    IPPROTO_HOPOPTS  :: 0 // IPv6 Hop-by-Hop options
    IPPROTO_ICMP     :: 1
    IPPROTO_IGMP     :: 2
    IPPROTO_GGP      :: 3
    IPPROTO_IPV4     :: 4
    IPPROTO_ST       :: 5
    IPPROTO_TCP      :: 6
    IPPROTO_CBT      :: 7
    IPPROTO_EGP      :: 8
    IPPROTO_IGP      :: 9
    IPPROTO_PUP      :: 12
    IPPROTO_UDP      :: 17
    IPPROTO_IDP      :: 22
    IPPROTO_RDP      :: 27
    IPPROTO_SO     :: 41 // IPv6 header
    IPPROTO_ROUTING  :: 43 // IPv6 Routing header
    IPPROTO_FRAGMENT :: 44 // IPv6 fragmentation header
    IPPROTO_ESP      :: 50 // encapsulating security payload
    IPPROTO_AH       :: 51 // authentication header
    IPPROTO_ICMPV6   :: 58 // ICMPv6
    IPPROTO_NONE     :: 59 // IPv6 no next header
    IPPROTO_DSTOPTS  :: 60 // IPv6 Destination options
    IPPROTO_ND       :: 77
    IPPROTO_ICLFXBM  :: 78
    IPPROTO_PIM      :: 103
    IPPROTO_PGM      :: 113
    IPPROTO_L2TP     :: 115
    IPPROTO_SCTP     :: 132
    IPPROTO_RAW      :: 255
}

using Address_Flags :: enum_flags u32 {
    AI_PASSIVE                  :: 0x00000001  // Socket address will be used in bind() call
    AI_CANONNAME                :: 0x00000002  // Return canonical name in first ai_canonname
    AI_NUMERICHOST              :: 0x00000004  // Nodename must be a numeric address string
    AI_NUMERICSERV              :: 0x00000008  // Servicename must be a numeric port number
    AI_DNS_ONLY                 :: 0x00000010  // Restrict queries to unicast DNS only (no LLMNR, netbios, etc.)
    AI_FORCE_CLEAR_TEXT         :: 0x00000020  // Force clear text DNS query
    AI_BYPASS_DNS_CACHE         :: 0x00000040  // Bypass DNS cache
    AI_RETURN_TTL               :: 0x00000080  // Return record TTL
    AI_ALL                      :: 0x00000100  // Query both IP6 and IP4 with AI_V4MAPPED
    AI_ADDRCONFIG               :: 0x00000400  // Resolution only if global address configured
    AI_V4MAPPED                 :: 0x00000800  // On v6 failure, query v4 and convert to V4MAPPED format
    AI_NON_AUTHORITATIVE        :: 0x00004000  // LUP_NON_AUTHORITATIVE
    AI_SECURE                   :: 0x00008000  // LUP_SECURE
    AI_RETURN_PREFERRED_NAMES   :: 0x00010000  // LUP_RETURN_PREFERRED_NAMES
    AI_FQDN                     :: 0x00020000  // Return the FQDN in ai_canonname
    AI_FILESERVER               :: 0x00040000  // Resolving fileserver name resolution
    AI_DISABLE_IDN_ENCODING     :: 0x00080000  // Disable Internationalized Domain Names handling
    AI_SECURE_WITH_FALLBACK     :: 0x00100000  // Forces clear text fallback if the secure DNS query fails
    AI_EXCLUSIVE_CUSTOM_SERVERS :: 0x00200000  // Use exclusively the custom DNS servers
    AI_RETURN_RESPONSE_FLAGS    :: 0x10000000  // Requests extra information about the DNS results
    AI_REQUIRE_SECURE           :: 0x20000000  // Forces the DNS query to be done over seucre protocols
    AI_RESOLUTION_HANDLE        :: 0x40000000  // Request resolution handle
    AI_EXTENDED                 :: 0x80000000  // Indicates this is extended ADDRINFOEX(2/..) struct
}

using Socket_Type :: enum u32 {
    SOCK_STREAM    :: 1
    SOCK_DGRAM     :: 2
    SOCK_RAW       :: 3
    SOCK_RDM       :: 4
    SOCK_SEQPACKET :: 5
}

SOCKADDR :: struct {
    sa_family: u16
    sa_data:   [14]u8
}

ADDRINFOA :: struct {
    ai_flags:     Address_Flags
    ai_family:    ADDRESS_FAMILY
    ai_socktype:  Socket_Type
    ai_protocol:  IPPROTO
    ai_addrlen:   u64
    ai_canonname: *u8
    ai_addr:      *SOCKADDR
    ai_next:      *ADDRINFOA
}
using SOCKET :: enum u64 {
    INVALID_SOCKET :: 0xFFFF_FFFF_FFFF_FFFF
}

SOMAXCONN :: 0x7fffffff
SOCKET_ERROR :: -1

socket :: (af: ADDRESS_FAMILY, type_: Socket_Type, protocol: IPPROTO) -> SOCKET #external "Ws2_32"

closesocket :: (s: SOCKET)                                -> s32 #external "Ws2_32"
bind        :: (s: SOCKET, name: *SOCKADDR, namelen: s32) -> s32 #external "Ws2_32"
listen      :: (s: SOCKET, backlog: s32)                  -> s32 #external "Ws2_32"

accept :: (s: SOCKET, addr: *SOCKADDR, addrlen: *s32) -> SOCKET #external "Ws2_32"

recv :: (s: SOCKET, buf: *u8, len: s32, flags: s32) -> s32 #external "Ws2_32"
send :: (s: SOCKET, buf: *u8, len: s32, flags: s32) -> s32 #external "Ws2_32"
