#import "Standard"

#if TARGET_WINDOWS {
    #load "Windows.milo"
} else {
    unsupported_os: u64 = "error"
}

SAMPLE_RATE :: 48000

Sample :: struct {
    left: s16
    right: s16
}

latency_sample_count: u64
sample_buffer: []Sample

sample_func :: (samples: []Sample, sample_index: u64) -> void

initialize_sound :: (hwnd: HWND, sample_generator: sample_func, buffer_length: f32 = 0.01, latency: f32 = 1.0 / 15) -> #must bool {
    set_latency(latency)
    buffer_sample_count = cast(u64) (buffer_length * SAMPLE_RATE)
    
    sample_buffer = new_array(Sample, buffer_sample_count)
    
    fill_samples = sample_generator
    
    if !initialize_sound_os(hwnd) return false
    
    return true
}

set_latency :: (latency: f32) {
    latency_sample_count = cast(u64) (latency * SAMPLE_RATE)
}

#scope_module
buffer_sample_count: u64
fill_samples: sample_func
