#import "Windows"
#import "String"

allocate :: (size: u64) -> #must *void {
	if !process_heap process_heap = GetProcessHeap()
	return HeapAlloc(process_heap, 0, size)
}



reallocate :: (block: *void, size: u64) -> #must *void {
	if block == null
		return allocate(size)
	else {			
		if !process_heap process_heap = GetProcessHeap()
		return HeapReAlloc(process_heap, 0, block, size)
	}
}

deallocate :: (block: *void) {
	if !process_heap process_heap = GetProcessHeap()
	HeapFree(process_heap, 0, block)
}

exit :: (code: u32 = 0) {
	ExitProcess(code)
}

// @Unicode
print_buffer :: (buffer: []u8) {
	if !std_out {
		std_out = GetStdHandle(STD_OUTPUT_HANDLE)
		SetConsoleOutputCP(CP_UTF8)
	}
	
	bytes_written: u32
	WriteFile(std_out, buffer.data, cast() buffer.count, *bytes_written)
}

print_buffer :: (c: *Concatenator) {
	if !std_out {
		std_out = GetStdHandle(STD_OUTPUT_HANDLE)
		SetConsoleOutputCP(CP_UTF8)
	}
	
	bucket := c.current_bucket
	
	while bucket {
		bytes_written: u32
		WriteFile(std_out, bucket.data.data, cast() bucket.offset, *bytes_written)
		
		bucket = bucket.next
	}
}

get_command_line_arguments :: () -> []string {
	count: s32

	windows_args := CommandLineToArgvW(GetCommandLineW(), *count)
	
	if !windows_args {
		return .{}
	}
	
	args := []string.{allocate(size_of(string) * cast(u64) count), cast() count}
	
	for * args {
		<<it = from_windows_string(windows_args[it_index])
	}

	return args
}

run_command_asyncs :: (command: string) -> bool {
	startup: STARTUPINFOW
	
	info: PROCESS_INFORMATION = --
	
	windows_command := to_windows_string(command)
	defer deallocate(windows_command)
	
	if !CreateProcessW(lpCommandLine = windows_command, lpStartupInfo = *startup, lpProcessInformation = *info)
		return false
	
	CloseHandle(info.hThread)
	CloseHandle(info.hProcess)
	
	return true
}

run_command :: (command: string) -> u32 {
	startup: STARTUPINFOW
	
	info: PROCESS_INFORMATION = --
	
	windows_command := to_windows_string(command)
	defer deallocate(windows_command)
	
	if !CreateProcessW(lpCommandLine = windows_command, lpStartupInfo = *startup, lpProcessInformation = *info, bInheritHandles = 1)
		return cast() -1
	
	CloseHandle(info.hThread)
	
	WaitForSingleObject(info.hProcess)
	
	exit_code: u32 = --
	
	if !GetExitCodeProcess(info.hProcess, *exit_code)
		return cast() -2
	
	CloseHandle(info.hProcess)
	
	return exit_code
}

enable_console_colors :: () -> bool {
	console := GetStdHandle(STD_OUTPUT_HANDLE);
	if (console != INVALID_HANDLE_VALUE) {
		mode: Console_Mode

		if GetConsoleMode(console, *mode) {
			if SetConsoleMode(console, mode | ENABLE_VIRTUAL_TERMINAL_PROCESSING) {
				return true
			}
		}
	}
	
	return false
}

#scope_module

std_out: HANDLE
process_heap: HANDLE