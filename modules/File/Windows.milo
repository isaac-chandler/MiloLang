#import "Windows"
#import "String"

// @Incomplete add multiple return values 
read_entire_file :: (file: string) -> (#must result: []u8, success := true) {
	filename := to_windows_string(file)
	
	handle := CreateFileW(filename.data, GENERIC_READ, FILE_SHARE_READ, null, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL | FILE_FLAG_SEQUENTIAL_SCAN)
	
	free_array(filename)
	
	if handle == INVALID_HANDLE_VALUE {
		return .{}, false
	} else {
		defer CloseHandle(handle)
		count: u64
	
		if GetFileSizeEx(handle, cast() *count) {
			result := new_array(u8, count, initialized = false)
			remaining := result
			
			
			while remaining {
				bytes_read: u32
				
				bytes_to_read := remaining.count
				
				if (bytes_to_read > 0xFFFF_FFFF) {
					bytes_to_read = 0xFFFF_FFFF
				}
				
				if !ReadFile(handle, remaining.data, cast() bytes_to_read, *bytes_read) || bytes_read != bytes_to_read {
					free_array(result)
					
					return .{}, false
				}
				
				remaining.count -= bytes_to_read
				remaining.data += bytes_to_read
			}

			return result
		} else {		
			return .{}, false
		}
	}
}

write_entire_file :: (file: string, data: []u8) -> bool {
	write := data
	
	filename := to_windows_string(file)
	
	handle := CreateFileW(filename.data, GENERIC_WRITE, 0, null, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL | FILE_FLAG_SEQUENTIAL_SCAN)
	free_array(filename)

	if handle == INVALID_HANDLE_VALUE {
		return false
	} else {
		defer CloseHandle(handle)

		while write {
			bytes_written: u32
			
			bytes_to_write := write.count
			
			if (bytes_to_write > 0xFFFF_FFFF) {
				bytes_to_write = 0xFFFF_FFFF
			}
			
			if !WriteFile(handle, write.data, cast() bytes_to_write, *bytes_written) || bytes_written != bytes_to_write {
				return false
			}
			
			write.count -= bytes_to_write
			write.data += bytes_to_write
		}
	}
	
	return true
}

get_files_in_directory :: (file: string, include_folders := false) -> [..]string {
	filter :: (using find_data: *WIN32_FIND_DATAW, include_folders: bool) -> bool {
		if include_folders {
			if dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY {
				if cFileName[0] == '.' && cFileName[1] == 0                         return false  // Ignore the .  directory listed by FindFirstFile
				if cFileName[0] == '.' && cFileName[1] == '.' && cFileName[2] == 0  return false  // Ignore the .. directory listed by FindFirstFile
			}
		
			return true
		} else {
			return !(dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)
		}
	}

	pattern := concatenate(file, "*", delimiter = "\\")
	defer free_string(pattern)

	files: [..]string
	
	find_data: WIN32_FIND_DATAW
	
	windows_string := to_windows_string(pattern)
	defer free_array(windows_string)
	
	find_handle := FindFirstFileW(windows_string.data, *find_data)
	
	if find_handle != INVALID_HANDLE_VALUE {
		defer FindClose(find_handle)
		
		if filter(*find_data, include_folders)  array_add(*files, from_windows_string(find_data.cFileName.data))
		
		while FindNextFileW(find_handle, *find_data) {
			if filter(*find_data, include_folders)  array_add(*files, from_windows_string(find_data.cFileName.data))
		}
	}
	
	return files
}

get_executable_path :: () -> string {
    filename_windows := new_array(u16, 32768, initialized = false)
    defer free_array(filename_windows)
    
    GetModuleFileNameW(null, filename_windows.data, cast() filename_windows.count)
    
    return from_windows_string(filename_windows.data)
}

get_path_relative_to_executable :: (path: string) -> string {
    executable_path := get_executable_path()
    defer free_string(executable_path)
    
    last_backslash := find_last(executable_path, "\\")
    
    return concatenate(executable_path[..last_backslash], path, delimiter = "\\")
}

get_final_path_name :: (path: string) -> string {
    last_backslash, found := find_last(path, "\\")
    
    if !found
        return path
    else if last_backslash + 1 == path.count
        return get_final_path_name(path[..path.count - 1])
    
    return path[last_backslash + 1..]
}