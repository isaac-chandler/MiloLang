#import "Standard"
#import "Bitmap"
#import "Thread"
#import "File"
#import "Windows"

ITERATIONS :: 256

width :: 4096
height :: 4096

x_min :: -2
x_max :: 2
y_min :: -2
y_max :: 2

mandelbrot:: (c_re: f32, c_im: f32) -> #must u64 {
	z_re := c_re
	z_im := c_im

	for ITERATIONS {
		if z_re * z_re + z_im * z_im > 4
			return cast() it
			
		new_z_re := z_re * z_re - z_im * z_im + c_re
		new_z_im := 2 * z_re * z_im + c_im
		
		z_re = new_z_re
		z_im = new_z_im
	}
	
	return ITERATIONS
}

Job :: struct {
	data: *u8
	
	start_row: s64
	end_row: s64
}

thread_proc :: (thread: *Thread) {
	job: *Job = thread.user_data
	
	for y: job.start_row .. job.end_row {
		for x: width {
			count := mandelbrot(cast(f32) x / width * (x_max - x_min) + x_min, cast(f32) y / height * (y_max - y_min) + y_min)
		
			if count == ITERATIONS {
				job.data[0] = 143
				job.data[1] = 63
				job.data[2] = 20
			} else {
				job.data[0] = cast() count
				job.data[1] = cast() count
				job.data[2] = cast() count
			}
			job.data += 3
		}
	}
}

THREAD_COUNT :: 8

main :: () {
	assert(height % THREAD_COUNT == 0)

	SIZE :: size_of(Bmp_File_Header) + size_of(Bmp_Dib_Header) + width * height * 3
	file := new_array(u8, SIZE)
	
	file_header: Bmp_File_Header
	
	file_header.file_size = SIZE
	file_header.offset_to_image = size_of(Bmp_File_Header) + size_of(Bmp_Dib_Header);
	
	<<cast(*type_of(file_header)) file.data = file_header
	
	dib_header: Bmp_Dib_Header;
	
	dib_header.width = width
	dib_header.height = height
	dib_header.image_size = 3 * width * height;
	
	<< cast(*type_of(dib_header)) *file[size_of(type_of(file_header))] = dib_header
	
	jobs: [THREAD_COUNT]Job
	
	threads: [THREAD_COUNT]*Thread
	
	image := *file.data[file_header.offset_to_image]
	
	for * jobs {
		it.start_row = height / THREAD_COUNT * cast() it_index
		it.end_row = height / THREAD_COUNT * cast()(it_index + 1)
		
		it.data = image + it.start_row * width * 3
	}
	
	performance_counter_frequency: s64
	
	QueryPerformanceFrequency(*performance_counter_frequency)
	
	counter_scale := 1.0 / cast(f32) performance_counter_frequency
	start_time: s64
	
	QueryPerformanceCounter(*start_time)
	
	for * threads {
		<<it = create_thread(thread_proc, *jobs[it_index])
	}
	
	for threads {
		wait_for_thread(it)
		close_thread(it)
	}
	
	end_time: s64
	
	QueryPerformanceCounter(*end_time)
	
	print("% s\n", cast() (end_time - start_time) * counter_scale)
	
	write_entire_file("mandelbrot.bmp", file)	
}