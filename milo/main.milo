#import "File"
#import "Standard"
#import "String"

#load "lexer.milo"
#load "types.milo"
#load "ast.milo"
#load "parser.milo"

filenames: [..]string

had_error := false

report_error :: (using location: Location, format: string, values: any..) {
	had_error = true
	
	print("%:%,% ", filenames[file_index], l0, c0)
	print(format, ..values)
	print("\n")
}

report_expected_error :: (using token: Token, format: string, values: any..) {
	had_error = true

	print("%:%,% ", filenames[file_index], l0, c0)
	print(format, ..values)

	if cast() token.kind < 128 {
		character := cast(u8) token.kind

		print(" but got '%' instead\n", string.{*character, 1})
	} else {
		print(" but got % instead\n", token.kind)
	}
}

copy_loc_start :: (dst: *Location, src: Location) {
	dst.file_index = src.file_index
	dst.l0 = src.l0
	dst.c0 = src.c0
}

copy_loc_end :: (dst: *Location, src: Location) {
	assert(dst.file_index == src.file_index)
	dst.l1 = src.l1
	dst.c1 = src.c1
}

copy_loc :: (dst: *Location, start: Location, end: Location) {
	copy_loc_start(dst, start)
	copy_loc_end  (dst, end  )
}

main :: () {
	arguments := get_command_line_arguments()
	
	if arguments.count == 0 {
		print("Failed to read command line arguments\n")
		return
	}
	
	if arguments.count != 2 {
		print("Usage: % <filename>\n", arguments[0])
		return
	}

	array_add(*filenames, arguments[1])
	
	file, success := read_entire_file(filenames[0])

	
	if !success {
		print("Failed to open file\n")
		exit(1)
	}

	tokens: [..]Token

	lexer: Lexer
	tokens, success = lex_string(*lexer, cast() file, 0)

	if !success
		exit(1)

	if !parse(tokens)
		exit(1)

	/*
	for token: tokens {		
		if cast(u8) token.kind < 128 {
			character := cast(u8) token.kind

			print("%\n", string.{*character, 1})
		} else if token.kind == .INT_LITERAL {
			print("%\n", token.integer)
		} else if token.kind == .FLOAT_LITERAL {
			print("%\n", token.float)
		} else if token.kind == .STRING_LITERAL {
			print("\"%\"\n", token.text)
		} else if token.kind == .IDENTIFIER {
			print("%\n", token.text)
		} else {		
			print("%\n", token.kind)
		}
	}
	*/
}