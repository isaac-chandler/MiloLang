#import "Standard"
#import "File"
#import "String"

Source_Location :: struct {
    file_id:      s32
    start_offset: s32
    end_offset:   s32
}

// @Workspaces
build_files: [..]string

// @Workspaces
had_error := false

report_error :: (location: Source_Location, message: string, ..format: any) {
    filename := build_files[location.file_uid]
    file_content, success := read_entire_file(filename)
    defer array_free(file_content)
    
    start_line := 1
    start_column := 1
    
    if !success {
        print("Internal Compiler Error: Could not read file '%' to display error location\n", filename)
    } else {
        offset := 0
        
        for 0 .. location.start_offset {
            start_column += 1
            
            if file_content[offset] == '\r' {
                if offset + 1 >= file_content.count || file_content[offset + 1] != {
                    start_line += 1
                    start_column = 1
                }
            } else if file_content[offset] == '\n' {
                start_line += 1
                start_column = 1
            }
        }
        
        
        
        print("%:%,% ", filename, start_line, start_column)
    }
    
    report_error(message, ..format)
    
    if success {
        start_offset := location.start_offset
        
        while start_offset {
            if file_content[start_offset - 1] == {
                case '\r'
                case '\n'
                    break
            }
            start_offset -= 1
        }
        
        end_offset := location.end_offset
        
        while end_offset < file_content.count {
            if file_content[end_offset] == {
                case '\r'
                case '\n'
                    break
            }
            end_offset += 1
        }
        
        // @Incomplete color precise location
        print("%\n", file_content[start_offset..end_offset])
    }
}

report_error :: (location: Source_Location, message: string, ..format: any) {
    had_error = true
    
    print("Error: ")
    print(message, ..format)
    print("\n")
}

main :: () {
    
}