#import "File"
#import "Standard"
#import "String"

#load "lexer.milo"
#load "types.milo"

Location :: struct {
	file_index: u32
	l0:         u32
	c0:         u32
	l1:         u32
	c1:         u32
}

filenames: [..]string

had_error := false

report_error :: (using location: Location, format: string, values: any..) {
	had_error = true
	
	print("%:%,% ", filenames[file_index], l0, c0)
	print(format, ..values)
	print("\n")
}

main :: () {
	arguments := get_command_line_arguments()
	
	if arguments.count == 0 {
		print("Failed to read command line arguments\n")
		return
	}
	
	if arguments.count != 2 {
		print("Usage: % <filename>\n", arguments[0])
		return
	}

	array_add(*filenames, arguments[1])
	
	file, success := read_entire_file(filenames[0])
	
	lexer := Lexer.{ data = cast,bit(string) file }
	
	if !success {
		print("Failed to open file\n")
		return
	}
	
	while true {
		token, success := advance_token(*lexer)
		
		if !success
			break
		
		if token.kind == .END_OF_FILE
			break;
		
		if cast() token.kind < 128 {
			print("%\n", string.{cast() *token.kind, 1})
		} else if token.kind == .INT_LITERAL {
			print("%\n", token.integer)
		} else if token.kind == .FLOAT_LITERAL {
			print("%\n", token.float)
		} else if token.kind == .STRING_LITERAL {
			print("\"%\"\n", token.text)
		} else if token.kind == .IDENTIFIER {
			print("%\n", token.text)
		} else {		
			print("%\n", token.kind)
		}
	}
}