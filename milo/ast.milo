Location :: struct {
	file_index: u32
	l0:         u32
	c0:         u32
	l1:         u32
	c1:         u32
}

Node :: struct {
	Kind :: enum u8 {
		INT_LITERAL
		FLOAT_LITERAL
		STRING_LITERAL
		TYPE_LITERAL
		ARRAY_LITERAL
		STRUCT_LITERAL

		IDENTIFIER

		BINARY_OPERATOR
		UNARY_OPERATOR

		FUNCTION_CALL

		FUNCTION
		FUNCTION_PROTOTYPE

		BLOCK
		FOR
		WHILE
		BREAK
		CONTINUE

		REMOVE
		RETURN

		IF
		SWITCH
		STATIC_IF

		SLICE
		DEFER
		RUN
		LOAD
		IMPORT

		OVERLOAD_SET
		CONTEXT
		PUSH_CONTEXT
		ENTRY_POINT
		ADD_CONTEXT
		DECLARATION

		STRUCT_DEFINITION
		ENUM_DEFINITION

		USING
	}

	Flags :: enum_flags u64 {
		CAST_IS_BITWISE
		ARRAY_TYPE_DYNAMIC
		CONTEXT_AVAILABLE
	}

	using loc: Location
	enclosing_block: *Block
	node_type: *Type
	text: string
	flags: Flags
	kind: Kind
}

Node_Overload_Set :: struct {
	using base := Node.{kind = .OVERLOAD_SET}

	identifier := *Node_Identifier
	current_declaration: *Node_Declaration
	resolving_from:       *Block
}

Node_Add_Context :: struct {
	using base := Node.{kind = .ADD_CONTEXT}

	declaration: *Node_Declaration
}

Node_Slice :: struct {
	using base := Node.{kind = .SLICE}

	array: *Node
	begin: *Node
	end:   *Node
}

Node_Run :: struct {
	using base := Node.{kind = .RUN}
	value:       *Node
}

Node_Load :: struct {
	using base := Node.{kind = .LOAD}
	value: *Node
}

Node_Literal :: struct {
	using base := Node.{kind = .INT_LITERAL}

	using value: union {
		unsigned_value:  u64
		signed_value:    s64 = --
		float_value:     f64 = --
		type_value:    *Type = --
	}
}

Node_Binary_Operator :: struct {
	using base := Node.{kind = .BINARY_OPERATOR}
	left:    *Node
	right:   *Node
	op: Token.Kind
}

Node_Unary_Operator :: struct {
	using base := Node.{kind = .UNARY_OPERATOR}
	value:    *Node
	op: Token.Kind
}

Node_Identifier :: struct {
	using base := Node.{kind = .IDENTIFIER}

	resolving_from: *Block
	struct_access: *Node
	declaration: *Node_Declaration
}

Argument :: struct {
	value: *Node
	name: string
	declaration: *Node_Declaration
	spread: bool // @Speed Don't have a separate bool for this
	             // it adds an extra 64 bits of size for 1 bit of 
	             // information, (maybe pack this into top bit of name.count?)
}

Node_Function_Call :: struct {
	using base := Node.{kind = .FUNCTION_CALL}
	function: *Node
	arguments: []Argument
}

Node_Block :: struct {
	using base := Node.{kind = .BLOCK}
	declarations: Block
	statements: []*Node
}

Node_Array_Literal :: struct {
	using base := Node.{kind = .ARRAY_LITERAL}
	type_value: *Node
	values: []*Node
}

Node_Struct_Literal :: struct {
	using base := Node.{kind = .STRUCT_LITERAL}
	type_value: *Node
	initializers: []Argument
}

Node_Function :: struct {
	using base := Node.{kind = .FUNCTION}
	constants: Block
	arguments: Block
	returns:   Block

	body: *Node
}

Node_Loop :: struct {
	using base := Node.{kind = .FOR}
	begin:   *Node
	end:     *Node
	body:    *Node
	or_body: *Node

	iterators: Block
}

Node_Loop_Control :: struct {
	using base := Node.{kind = .BREAK}
	refers_to: *Node_Loop
}

Node_If :: struct {
	using base := Node.{kind = .IF}
	condition: *Node
	if_body:   *Node
	else_body: *Node
}

Node_Comma_Assignment :: struct {
	left: []*Node
	call:   *Node
}

Node_Declaration :: struct {
	using base := Node.{kind = .DECLARATION}
	type_value: *Node
	value:     *Node

	Declaration_Flags :: enum_flags u64 {
		CONSTANT
		USING
		MODULE_SCOPE
		UNINITIALIZED
		EXPLICIT_DEFAULT
	}

	declaration_flags: Declaration_Flags 
	next_overload: *Node_Declaration
}

Node_Struct_Definition :: struct {
	using base := Node.{kind = .STRUCT_DEFINITION}

	statements: []*Node
	defined_type: Type_Struct
	block: Block
}

Node_Enum_Defintion :: struct {
	using base := Node.{kind = .ENUM_DEFINITION}
	defined_type: Type_Enum
	block: Block
}

Block :: struct {
	Kind :: enum u8 {
		IMPERATIVE
		CONSTANTS
		ARGUMENTS
		RETURNS
		STRUCT
		ENUM
		MODULE
	}

	created_by: *Node

	declarations: *Node_Declaration
	
	parent: *Block
	kind: Kind
}