Type :: struct {
	Kind :: enum u8 {
		INTEGER
		FLOAT
		POINTER
		MEMORY
		BOOL
		FUNCTION
		TYPE
		STRING
		ARRAY
		STRUCT
		ENUM
	}
	
	Flags :: enum_flags u16 {
		SIGNED
		FIXED_ARRAY
		DYNAMIC_ARRAY
		UNION
		PACKED
		ENUM_FLAGS
		C_CALL
	}
	
	size: u64
	alignment: u64
	name: string
	
	kind: Kind
	flags: Flags
	
}

Type_Pointer :: struct {
	using base := Type.{kind = POINTER}
	element_type: *Type
}

Type_Array :: struct {
	using base := Type.{kind = ARRAY}
	element_type: *Type 
	count: u64
}

Type_Struct :: struct {
	using base := Type.{kind = STRUCT}
	members: Block
}

Type_Enum :: struct {
	using base := Type.{kind = ENUM}
	integer_type: *Type
	members: Block
}

Type_Function :: struct {
	using base := Type.{kind = FUNCTION}
	arguments: []*Type
	returns:   []*Type
	varargs:   []u64   // Array with indices of varargs arguments
}

TYPE_S8  := Type.{1, 1, "s8",  .INTEGER, .SIGNED}
TYPE_S16 := Type.{2, 2, "s16", .INTEGER, .SIGNED}
TYPE_S32 := Type.{4, 4, "s32", .INTEGER, .SIGNED}
TYPE_S64 := Type.{8, 8, "s64", .INTEGER, .SIGNED}

TYPE_U8  := Type.{1, 1, "u8",  .INTEGER, .SIGNED}
TYPE_U16 := Type.{2, 2, "u16", .INTEGER, .SIGNED}
TYPE_U32 := Type.{4, 4, "u32", .INTEGER, .SIGNED}
TYPE_U64 := Type.{8, 8, "u64", .INTEGER, .SIGNED}

TYPE_BOOL := Type.{1, 1, "bool", .BOOL}

TYPE_MEMORY := Type.{8, 8, "memory", .MEMORY}

TYPE_F32 := Type.{4, 4, "f32", .FLOAT}
TYPE_F64 := Type.{8, 8, "f64", .FLOAT}

TYPE_TYPE := Type.{8, 8, "type", .TYPE}

TYPE_STRING := Type.{16, 8, "string", .STRING}

// These types are initialized at startup
TYPE_U8_POINTER: *Type
TYPE_U8_ARRAY:   *Type

// These types will be filled in by type inference when Runtime.milo is loaded
TYPE_ANY: *Type

TYPE_TYPE_INFO:               *Type
TYPE_TYPE_INFO_INTEGER:       *Type
TYPE_TYPE_INFO_POINTER:       *Type
TYPE_TYPE_INFO_FUNCTION:      *Type
TYPE_TYPE_INFO_ARRAY:         *Type
TYPE_TYPE_INFO_STRUCT:        *Type
TYPE_TYPE_INFO_STRUCT_MEMBER: *Type
TYPE_TYPE_INFO_ENUM:          *Type
TYPE_TYPE_INFO_ENUM_VALUE:    *Type