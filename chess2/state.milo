pack :: (x: s8, y: s8) -> s8 {
	return y * 8 + x
}

unpack :: (postion: s8) -> (s8, s8) {
	return postion & 7, postion >> 3
}

Move :: struct {
	START_PIECE_MASK :: 0xF
	CAPTURE_FLAG :: 0x10
	
	start_piece_flags: s8
	end_piece: s8
	start: s8
	end: s8
}

WHITE_PAWN_TWO         :: -1
BLACK_PAWN_TWO         :: -2
WHITE_EN_PASSANT       :: -3
BLACK_EN_PASSANT       :: -4
WHITE_KINGSIDE_CASTLE  :: -5
BLACK_KINGSIDE_CASTLE  :: -6
WHITE_QUEENSIDE_CASTLE :: -7
BLACK_QUEENSIDE_CASTLE :: -8

collect_occupied :: (using state: *State, start := 0, end := 12) -> u64 {
	occupied: u64 = 0

	for start .. end {
		occupied |= state.pieces[it]
	}

	return occupied
}

flip :: (square: s8) -> s8 {
	return square ^ 56
}


BLACK_PAWN   :: 0
BLACK_KING   :: 1
BLACK_KNIGHT :: 2
BLACK_ROOK   :: 3
BLACK_BISHOP :: 4
BLACK_QUEEN  :: 5
WHITE_PAWN   :: 6
WHITE_KING   :: 7
WHITE_KNIGHT :: 8
WHITE_ROOK   :: 9
WHITE_BISHOP :: 10
WHITE_QUEEN  :: 11

State :: struct {
	pieces: [12]u64
	hash: u64

	Castle :: enum_flags u8 {
		BLACK_NO_KINGSIDE
		BLACK_NO_QUEENSIDE
		WHITE_NO_KINGSIDE
		WHITE_NO_QUEENSIDE
	}	

	ply: s16
	move_count: s8
	castle_state: Castle
	en_passant_position: s8 = 0
	white_move: bool
	previous_move: Move
}

create_mask :: (bits: [64]u64) -> u64 {
	mask: u64 = 0
	
	for bits {
		if it
			mask |= 1 << it_index
	}

	return mask
}


moves_equal :: (a: Move, b: Move) -> bool {
	return a.start_piece_flags == b.start_piece_flags && a.end_piece == b.end_piece && a.start == b.start && a.end == b.end
}

move_is_legal :: (using state: *State, move: Move) -> bool {
	if white_move != ((move.start_piece_flags & Move.START_PIECE_MASK) >= WHITE_PAWN) {
		return false
	}

	if get_piece(state, move.start) != (move.start_piece_flags & Move.START_PIECE_MASK) {
		return false
	}
	white_pieces := collect_occupied(state, start = WHITE_PAWN)
	black_pieces := collect_occupied(state, end = WHITE_PAWN)
	all_pieces := black_pieces | white_pieces


	if move.start_piece_flags & Move.START_PIECE_MASK == {
		case BLACK_PAWN
			if move.end_piece == BLACK_EN_PASSANT {
				return en_passant_position == move.end
			} else if move.end_piece == BLACK_PAWN_TWO {
				return !(all_pieces & (0x10100 << cast(u64) move.start))
			} else if move.end - move.start == 8 {
				return !(all_pieces & (0x100 << cast(u64) move.start))			
			} else {
				return cast() (white_pieces & (1 << cast(u64) move.end))
			}
		case WHITE_PAWN
			if move.end_piece == WHITE_EN_PASSANT {
				return en_passant_position == move.end
			} else if move.end_piece == WHITE_PAWN_TWO {
				return !(all_pieces & (0x101 << (cast(u64) move.start - 16)))
			} else if move.end - move.start == -8 {
				return !(all_pieces & (1 << (cast(u64) move.start - 8)))				
			} else {
				return cast() (black_pieces & (1 << cast(u64) move.end))
			}
		case BLACK_KING
			if move.end_piece == BLACK_KINGSIDE_CASTLE {
				return !(castle_state & .BLACK_NO_KINGSIDE) && 
					!(all_pieces & ((1 << 5) | (1 << 6))) && 
					!look_for_checks(state, 4, false) && !look_for_checks(state, 5, false)
			} else if move.end_piece == BLACK_QUEENSIDE_CASTLE {
				return !(castle_state & .BLACK_NO_QUEENSIDE) && 
					!(all_pieces & ((1 << 3) | (1 << 2) | (1 << 1))) && 
					!look_for_checks(state, 4, false) && !look_for_checks(state, 3, false)
			} else {
				return !(black_pieces & (1 << cast(u64) move.end))
			}
		case WHITE_KING
			if move.end_piece == WHITE_KINGSIDE_CASTLE {
				return !(castle_state & .WHITE_NO_KINGSIDE) && 
					!(all_pieces & ((1 << 61) | (1 << 62))) && 
					!look_for_checks(state, 60, true) && !look_for_checks(state, 61, true)
			} else if move.end_piece == WHITE_QUEENSIDE_CASTLE {
				return !(castle_state & .WHITE_NO_QUEENSIDE) && 
					!(all_pieces & ((1 << 59) | (1 << 58) | (1 << 57))) && 
					!look_for_checks(state, 60, true) && !look_for_checks(state, 59, true)
			} else {
				return !(white_pieces & (1 << cast(u64) move.end))
			}
		case BLACK_KNIGHT
			return !(black_pieces & (1 << cast(u64) move.end))
		case WHITE_KNIGHT
			return !(white_pieces & (1 << cast(u64) move.end))
		case BLACK_BISHOP
			return !(black_pieces & (1 << cast(u64) move.end)) && 
				((1 << cast(u64) move.end) & get_bishop_moves(move.start, all_pieces))
		case WHITE_BISHOP
			return !(white_pieces & (1 << cast(u64) move.end)) && 
				((1 << cast(u64) move.end) & get_bishop_moves(move.start, all_pieces))
		case BLACK_ROOK
			return !(black_pieces & (1 << cast(u64) move.end)) && 
				((1 << cast(u64) move.end) & get_rook_moves(move.start, all_pieces))
		case WHITE_ROOK
			return !(white_pieces & (1 << cast(u64) move.end)) && 
				((1 << cast(u64) move.end) & get_rook_moves(move.start, all_pieces))
		case BLACK_QUEEN
			return !(black_pieces & (1 << cast(u64) move.end)) && 
				((1 << cast(u64) move.end) & (get_bishop_moves(move.start, all_pieces) | get_rook_moves(move.start, all_pieces)))
		case WHITE_QUEEN
			return !(white_pieces & (1 << cast(u64) move.end)) && 
				((1 << cast(u64) move.end) & (get_bishop_moves(move.start, all_pieces) | get_rook_moves(move.start, all_pieces)))
		else
			return false
	}
}

is_capture_move :: (move: Move) -> bool {
	return cast() (move.start_piece_flags & Move.CAPTURE_FLAG)
}

is_promotion_move :: (move: Move) -> bool {
	return move.end_piece > (move.start_piece_flags & Move.START_PIECE_MASK)
}

get_piece :: (using state: *State, index: s8, start: s8 = 0, end: s8 = 12) -> s8 {
	mask := 1 << cast(u64) index

	for start .. end {
		if pieces[it] & mask
			return it
	}

	return -1
}

look_for_checks :: (using state: *State, square: s8, white_king: bool) -> bool {
	all_pieces := collect_occupied(state)

	if white_king {
		if pieces[BLACK_PAWN] & white_king_black_pawn_check_mask[square]
			return true
		else if pieces[BLACK_KNIGHT] & knight_mask[square]
			return true
		else if pieces[BLACK_KING] & king_mask[square]
			return true
		else if (pieces[BLACK_BISHOP] | pieces[BLACK_QUEEN]) & get_bishop_moves(square, all_pieces)
			return true
		else if (pieces[BLACK_ROOK] | pieces[BLACK_QUEEN]) & get_rook_moves(square, all_pieces)
			return true
	} else {
		if pieces[WHITE_PAWN] & black_king_white_pawn_check_mask[square]
			return true
		else if pieces[WHITE_KNIGHT] & knight_mask[square]
			return true
		else if pieces[WHITE_KING] & king_mask[square]
			return true
		else if (pieces[WHITE_BISHOP] | pieces[WHITE_QUEEN]) & get_bishop_moves(square, all_pieces)
			return true
		else if (pieces[WHITE_ROOK] | pieces[WHITE_QUEEN]) & get_rook_moves(square, all_pieces)
			return true
	}
	return false
}

look_for_checks_fast :: (using state: *State, all_pieces: u64, $square: s8, $white_king: bool) -> bool {
	if white_king {
		if pieces[BLACK_PAWN] & white_king_black_pawn_check_mask[square]
			return true
		else if pieces[BLACK_KNIGHT] & knight_mask[square]
			return true
		else if pieces[BLACK_KING] & king_mask[square]
			return true
		else if (pieces[BLACK_BISHOP] | pieces[BLACK_QUEEN]) & get_bishop_moves(square, all_pieces)
			return true
		else if (pieces[BLACK_ROOK] | pieces[BLACK_QUEEN]) & get_rook_moves(square, all_pieces)
			return true
	} else {
		if pieces[WHITE_PAWN] & black_king_white_pawn_check_mask[square]
			return true
		else if pieces[WHITE_KNIGHT] & knight_mask[square]
			return true
		else if pieces[WHITE_KING] & king_mask[square]
			return true
		else if (pieces[WHITE_BISHOP] | pieces[WHITE_QUEEN]) & get_bishop_moves(square, all_pieces)
			return true
		else if (pieces[WHITE_ROOK] | pieces[WHITE_QUEEN]) & get_rook_moves(square, all_pieces)
			return true
	}
	return false
}

is_in_check :: (using state: *State, other_side := false) -> bool {
	if white_move ^ other_side {
		return look_for_checks(state, cast() bit_scan_forward(pieces[WHITE_KING]), true)
	} else {
		return look_for_checks(state, cast() bit_scan_forward(pieces[BLACK_KING]), false)
	}
}

checked_do_move :: (using state: *State, using move: Move) -> (State, #must bool) {
	stats.time_in_do_move -= get_performance_ticks()
	defer stats.time_in_do_move += get_performance_ticks()
	new_state := do_move(state, move)

	return new_state, !is_in_check(*new_state, other_side = true)
}

white_pawn_up_one_mask :: #run create_mask(.[
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1
])

white_pawn_promote_mask :: #run create_mask(.[
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
])

white_pawn_promote_left_mask :: #run create_mask(.[
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
])

white_pawn_promote_right_mask :: #run create_mask(.[
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
])

white_pawn_up_two_mask :: #run create_mask(.[
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0
])

white_pawn_right_capture_mask :: #run create_mask(.[
	0, 0, 0, 0, 0, 0, 0, 0,  
	0, 0, 0, 0, 0, 0, 0, 0,  
	1, 1, 1, 1, 1, 1, 1, 0,  
	1, 1, 1, 1, 1, 1, 1, 0,  
	1, 1, 1, 1, 1, 1, 1, 0,  
	1, 1, 1, 1, 1, 1, 1, 0,  
	1, 1, 1, 1, 1, 1, 1, 0,  
	0, 0, 0, 0, 0, 0, 0, 0
])

white_pawn_left_capture_mask :: #run create_mask(.[
	0, 0, 0, 0, 0, 0, 0, 0,  
	0, 0, 0, 0, 0, 0, 0, 0,  
	0, 1, 1, 1, 1, 1, 1, 1,  
	0, 1, 1, 1, 1, 1, 1, 1,  
	0, 1, 1, 1, 1, 1, 1, 1,  
	0, 1, 1, 1, 1, 1, 1, 1,  
	0, 1, 1, 1, 1, 1, 1, 1,  
	0, 0, 0, 0, 0, 0, 0, 0
])

black_pawn_up_one_mask :: #run create_mask(.[
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
])

black_pawn_promote_mask :: #run create_mask(.[
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0
])

black_pawn_promote_left_mask :: #run create_mask(.[
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0
])

black_pawn_promote_right_mask :: #run create_mask(.[
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
])

black_pawn_up_two_mask :: #run create_mask(.[
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
])

black_pawn_right_capture_mask :: #run create_mask(.[
	0, 0, 0, 0, 0, 0, 0, 0,  
	1, 1, 1, 1, 1, 1, 1, 0,  
	1, 1, 1, 1, 1, 1, 1, 0,  
	1, 1, 1, 1, 1, 1, 1, 0,  
	1, 1, 1, 1, 1, 1, 1, 0,  
	1, 1, 1, 1, 1, 1, 1, 0,  
	0, 0, 0, 0, 0, 0, 0, 0,  
	0, 0, 0, 0, 0, 0, 0, 0
])

black_pawn_left_capture_mask :: #run create_mask(.[
	0, 0, 0, 0, 0, 0, 0, 0,  
	0, 1, 1, 1, 1, 1, 1, 1,  
	0, 1, 1, 1, 1, 1, 1, 1,  
	0, 1, 1, 1, 1, 1, 1, 1,  
	0, 1, 1, 1, 1, 1, 1, 1,  
	0, 1, 1, 1, 1, 1, 1, 1,  
	0, 0, 0, 0, 0, 0, 0, 0,  
	0, 0, 0, 0, 0, 0, 0, 0
])

white_kingside_castle_mask :: #run create_mask(.[
	0, 0, 0, 0, 0, 0, 0, 0,  
	0, 0, 0, 0, 0, 0, 0, 0,  
	0, 0, 0, 0, 0, 0, 0, 0,  
	0, 0, 0, 0, 0, 0, 0, 0,  
	0, 0, 0, 0, 0, 0, 0, 0,  
	0, 0, 0, 0, 0, 0, 0, 0,  
	0, 0, 0, 0, 0, 0, 0, 0,  
	0, 0, 0, 0, 0, 1, 1, 0
])

white_queenside_castle_mask :: #run create_mask(.[
	0, 0, 0, 0, 0, 0, 0, 0,  
	0, 0, 0, 0, 0, 0, 0, 0,  
	0, 0, 0, 0, 0, 0, 0, 0,  
	0, 0, 0, 0, 0, 0, 0, 0,  
	0, 0, 0, 0, 0, 0, 0, 0,  
	0, 0, 0, 0, 0, 0, 0, 0,  
	0, 0, 0, 0, 0, 0, 0, 0,  
	0, 1, 1, 1, 0, 0, 0, 0
])

black_kingside_castle_mask :: #run create_mask(.[
	0, 0, 0, 0, 0, 1, 1, 0,  
	0, 0, 0, 0, 0, 0, 0, 0,  
	0, 0, 0, 0, 0, 0, 0, 0,  
	0, 0, 0, 0, 0, 0, 0, 0,  
	0, 0, 0, 0, 0, 0, 0, 0,  
	0, 0, 0, 0, 0, 0, 0, 0,  
	0, 0, 0, 0, 0, 0, 0, 0,  
	0, 0, 0, 0, 0, 0, 0, 0
])

black_queenside_castle_mask :: #run create_mask(.[
	0, 1, 1, 1, 0, 0, 0, 0,  
	0, 0, 0, 0, 0, 0, 0, 0,  
	0, 0, 0, 0, 0, 0, 0, 0,  
	0, 0, 0, 0, 0, 0, 0, 0,  
	0, 0, 0, 0, 0, 0, 0, 0,  
	0, 0, 0, 0, 0, 0, 0, 0,  
	0, 0, 0, 0, 0, 0, 0, 0,  
	0, 0, 0, 0, 0, 0, 0, 0
])

file_mask :: #run create_mask(.[
	1, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0
])

dark_square_mask :: #run create_mask(.[
	1, 0, 1, 0, 1, 0, 1, 0, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	1, 0, 1, 0, 1, 0, 1, 0,  
	0, 1, 0, 1, 0, 1, 0, 1, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	0, 1, 0, 1, 0, 1, 0, 1
])

precompute_legal_knight_moves :: () -> [64]u64 {
	result: [64]u64
	
	for * result {
		x, y := unpack(cast() it_index)
		
		if x >= 1 && y >= 2  { <<it |= 1 << cast(u64) pack(x - 1, y - 2) }
		if x >= 1 && y <= 5  { <<it |= 1 << cast(u64) pack(x - 1, y + 2) }
		if x >= 2 && y >= 1  { <<it |= 1 << cast(u64) pack(x - 2, y - 1) }
		if x >= 2 && y <= 6  { <<it |= 1 << cast(u64) pack(x - 2, y + 1) }
		if x <= 6 && y >= 2  { <<it |= 1 << cast(u64) pack(x + 1, y - 2) }
		if x <= 6 && y <= 5  { <<it |= 1 << cast(u64) pack(x + 1, y + 2) }
		if x <= 5 && y >= 1  { <<it |= 1 << cast(u64) pack(x + 2, y - 1) }
		if x <= 5 && y <= 6  { <<it |= 1 << cast(u64) pack(x + 2, y + 1) }
	}
	
	return result
}

precompute_legal_king_moves :: () -> [64]u64 {
	result: [64]u64

	for * result {
		x, y := unpack(cast() it_index)
		
		if x >= 1            { <<it |= 1 << cast(u64) pack(x - 1, y    ) }
		if x <= 6            { <<it |= 1 << cast(u64) pack(x + 1, y    ) }
		if y >= 1            { <<it |= 1 << cast(u64) pack(x    , y - 1) }
		if y <= 6            { <<it |= 1 << cast(u64) pack(x    , y + 1) }
		if x >= 1 && y >= 1  { <<it |= 1 << cast(u64) pack(x - 1, y - 1) }
		if x >= 1 && y <= 6  { <<it |= 1 << cast(u64) pack(x - 1, y + 1) }
		if x <= 6 && y >= 1  { <<it |= 1 << cast(u64) pack(x + 1, y - 1) }
		if x <= 6 && y <= 6  { <<it |= 1 << cast(u64) pack(x + 1, y + 1) }
	}
	
	return result
}

precompute_black_king_white_pawn_check :: () -> [64]u64 {
	result: [64]u64

	for * result {
		x, y := unpack(cast() it_index)
		
		if x >= 1 && y <= 6  { <<it |= 1 << cast(u64) pack(x - 1, y + 1) }
		if x <= 6 && y <= 6  { <<it |= 1 << cast(u64) pack(x + 1, y + 1) }
	}
	
	return result
}

precompute_white_king_black_pawn_check :: () -> [64]u64 {
	result: [64]u64

	for * result {
		x, y := unpack(cast() it_index)
		
		if x >= 1 && y >= 1  { <<it |= 1 << cast(u64) pack(x - 1, y - 1) }
		if x <= 6 && y >= 1  { <<it |= 1 << cast(u64) pack(x + 1, y - 1) }
	}
	
	return result
}

precompute_en_passant_candidate :: () -> [64]u64 {
	result: [64]u64

	for * result {
		x, y := unpack(cast() it_index)
		
		if x >= 1  { <<it |= 1 << cast(u64) pack(x - 1, y) }
		if x <= 6  { <<it |= 1 << cast(u64) pack(x + 1, y) }
	}

	return result
}

get_colored_piece :: (using state: *State, square: s8, color: bool) -> s8 {
	if color
		return get_piece(state, square, start = WHITE_PAWN)
	else
		return get_piece(state, square, end = WHITE_PAWN)
}

knight_mask :: #run precompute_legal_knight_moves()
king_mask   :: #run precompute_legal_king_moves()

en_passant_candidate_mask :: #run precompute_en_passant_candidate()
white_king_black_pawn_check_mask :: #run precompute_white_king_black_pawn_check()
black_king_white_pawn_check_mask :: #run precompute_black_king_white_pawn_check()

iterate_bits :: (mask: *u64, square: *s8) -> bool {
	bit, zero := bit_scan_forward(<<mask)

	if zero return false;

	<<square = cast() bit;
	<<mask &= <<mask - 1

	return true
}

magic_table: Magic_Table

get_bishop_moves :: (square: s8, occupied: u64) -> u64 {
	return magic_table.bishop_table[square][magic_table.bishop_mul[square] * (occupied & magic_table.bishop_mask[square]) >> 55]
}

get_rook_moves :: (square: s8, occupied: u64) -> u64 {
	return magic_table.rook_table[square][magic_table.rook_mul[square] * (occupied & magic_table.rook_mask[square]) >> 52]
}

Move_Kind :: enum_flags u8 { 
	QUIET
	CAPTURE
	PROMOTION
}

get_moves :: (using state: *State, moves: *[..]Move, $capture_or_promotion: bool) {
	stats.time_in_movegen -= get_performance_ticks()
	defer stats.time_in_movegen += get_performance_ticks()

	white_pieces := collect_occupied(state, start = WHITE_PAWN)
	black_pieces := collect_occupied(state, end = WHITE_PAWN)
	all_pieces := white_pieces | black_pieces
	
	move: Move = --
	mask: u64 = --
	piece_mask: u64 = --
	if white_move {
		move.start_piece_flags = WHITE_PAWN
		move.end_piece = move.start_piece_flags
		piece_mask = pieces[move.start_piece_flags]

		#if capture_or_promotion {
			move.start_piece_flags |= Move.CAPTURE_FLAG
			
			mask = (piece_mask & white_pawn_left_capture_mask) & (black_pieces << 9)
			while iterate_bits(*mask, *move.start) {
				move.end = move.start - 9
				array_add_unchecked(moves, move)
			}

			mask = (piece_mask & white_pawn_right_capture_mask) & (black_pieces << 7)
			while iterate_bits(*mask, *move.start) {
				move.end = move.start - 7
				array_add_unchecked(moves, move)
			}


			mask = (piece_mask & white_pawn_left_capture_mask) & (1 << cast(u64) (en_passant_position + 9))
			if mask {
				move.start = en_passant_position + 9
				move.end = en_passant_position
				move.end_piece = WHITE_EN_PASSANT
				array_add_unchecked(moves, move)
			}

			mask = (piece_mask & white_pawn_right_capture_mask) & (1 << cast(u64) (en_passant_position + 7))
			if mask {
				move.start = en_passant_position + 7
				move.end = en_passant_position
				move.end_piece = WHITE_EN_PASSANT
				array_add_unchecked(moves, move)
			}
			
			mask = (piece_mask & white_pawn_promote_left_mask) & (black_pieces << 9)
			while iterate_bits(*mask, *move.start) {
				move.end = move.start - 9

				for WHITE_KNIGHT .. WHITE_QUEEN + 1 {
					move.end_piece = cast() it
					array_add_unchecked(moves, move)
				}
			}

			mask = (piece_mask & white_pawn_promote_right_mask) & (black_pieces << 7)
			while iterate_bits(*mask, *move.start) {
				move.end = move.start - 7

				for WHITE_KNIGHT .. WHITE_QUEEN + 1 {
					move.end_piece = cast() it
					array_add_unchecked(moves, move)
				}
			}
			
			move.start_piece_flags = WHITE_PAWN
			mask = (piece_mask & white_pawn_promote_mask) & ~(all_pieces << 8)
			while iterate_bits(*mask, *move.start) {
				move.end = move.start - 8

				for WHITE_KNIGHT .. WHITE_QUEEN + 1 {
					move.end_piece = cast() it
					array_add_unchecked(moves, move)
				}
			}
		} else {
			move.end_piece = WHITE_PAWN_TWO
			mask = (piece_mask & white_pawn_up_two_mask) & ~(all_pieces << 8) & ~(all_pieces << 16)
			while iterate_bits(*mask, *move.start) {
				move.end = move.start - 16
				array_add_unchecked(moves, move)
			}
			
			mask = (piece_mask & white_pawn_up_one_mask) & ~(all_pieces << 8)
			while iterate_bits(*mask, *move.start) {
				move.end = move.start - 8
				array_add_unchecked(moves, move)
			}
		}


		move.start_piece_flags = WHITE_KNIGHT		
		move.end_piece = move.start_piece_flags
		piece_mask = pieces[move.start_piece_flags]
		#if capture_or_promotion {
			move.start_piece_flags |= Move.CAPTURE_FLAG
		}
		while iterate_bits(*piece_mask, *move.start) {
			mask = knight_mask[move.start]
			#if capture_or_promotion {
				mask &= black_pieces
			} else {
				mask &= ~all_pieces
			}

			while iterate_bits(*mask, *move.end)
				array_add_unchecked(moves, move)
		}


		move.start_piece_flags = WHITE_BISHOP		
		move.end_piece = move.start_piece_flags
		piece_mask = pieces[move.start_piece_flags]
		#if capture_or_promotion {
			move.start_piece_flags |= Move.CAPTURE_FLAG
		}
		while iterate_bits(*piece_mask, *move.start) {
			mask = get_bishop_moves(move.start, all_pieces)
			#if capture_or_promotion {
				mask &= black_pieces
			} else {
				mask &= ~all_pieces
			}

			while iterate_bits(*mask, *move.end)
				array_add_unchecked(moves, move)
		}


		move.start_piece_flags = WHITE_ROOK		
		move.end_piece = move.start_piece_flags
		piece_mask = pieces[move.start_piece_flags]
		#if capture_or_promotion {
			move.start_piece_flags |= Move.CAPTURE_FLAG
		}
		while iterate_bits(*piece_mask, *move.start) {
			mask = get_rook_moves(move.start, all_pieces)
			#if capture_or_promotion {
				mask &= black_pieces
			} else {
				mask &= ~all_pieces
			}

			while iterate_bits(*mask, *move.end)
				array_add_unchecked(moves, move)
		}


		move.start_piece_flags = WHITE_QUEEN
		move.end_piece = move.start_piece_flags
		piece_mask = pieces[move.start_piece_flags]
		#if capture_or_promotion {
			move.start_piece_flags |= Move.CAPTURE_FLAG
		}
		while iterate_bits(*piece_mask, *move.start) {
			mask = get_bishop_moves(move.start, all_pieces) | get_rook_moves(move.start, all_pieces)
			#if capture_or_promotion {
				mask &= black_pieces
			} else {
				mask &= ~all_pieces
			}

			while iterate_bits(*mask, *move.end)
				array_add_unchecked(moves, move)
		}


		move.start_piece_flags = WHITE_KING
		move.end_piece = move.start_piece_flags
		piece_mask = pieces[move.start_piece_flags]
		#if capture_or_promotion {
			move.start_piece_flags |= Move.CAPTURE_FLAG
		}
		move.start = cast() bit_scan_forward(piece_mask)
		mask = king_mask[move.start]
		#if capture_or_promotion {
			mask &= black_pieces
		} else {
			mask &= ~all_pieces
		}
		while iterate_bits(*mask, *move.end)
			array_add_unchecked(moves, move)

		#if !capture_or_promotion {
			if !(castle_state & .WHITE_NO_KINGSIDE) && !(all_pieces & white_kingside_castle_mask) 
				&& !look_for_checks_fast(state, all_pieces, 60, true) && !look_for_checks_fast(state, all_pieces, 61, true) {
				move.end = 62
				move.end_piece = WHITE_KINGSIDE_CASTLE
				array_add_unchecked(moves, move)
			}
			if !(castle_state & .WHITE_NO_QUEENSIDE) && !(all_pieces & white_queenside_castle_mask) 
				&& !look_for_checks_fast(state, all_pieces, 60, true) && !look_for_checks_fast(state, all_pieces, 59, true) {
				move.end = 58
				move.end_piece = WHITE_QUEENSIDE_CASTLE
				array_add_unchecked(moves, move)
			}
		}

	} else {
		move.start_piece_flags = BLACK_PAWN		
		move.end_piece = move.start_piece_flags
		piece_mask = pieces[move.start_piece_flags]

		#if capture_or_promotion {
			move.start_piece_flags |= Move.CAPTURE_FLAG
			mask = (piece_mask & black_pawn_left_capture_mask) & (white_pieces >> 7)
			while iterate_bits(*mask, *move.start) {
				move.end = move.start + 7
				array_add_unchecked(moves, move)
			}

			mask = (piece_mask & black_pawn_right_capture_mask) & (white_pieces >> 9)
			while iterate_bits(*mask, *move.start) {
				move.end = move.start + 9
				array_add_unchecked(moves, move)
			}


			mask = (piece_mask & black_pawn_left_capture_mask) & (1 << cast(u64) (en_passant_position - 7))
			if mask {
				move.start = en_passant_position - 7
				move.end = en_passant_position
				move.end_piece = BLACK_EN_PASSANT
				array_add_unchecked(moves, move)
			}

			mask = (piece_mask & black_pawn_right_capture_mask) & (1 << cast(u64) (en_passant_position - 9))
			if mask {
				move.start = en_passant_position - 9
				move.end = en_passant_position
				move.end_piece = BLACK_EN_PASSANT
				array_add_unchecked(moves, move)
			}
			
			mask = (piece_mask & black_pawn_promote_left_mask) & (white_pieces >> 7)
			while iterate_bits(*mask, *move.start) {
				move.end = move.start + 7

				for BLACK_KNIGHT .. BLACK_QUEEN + 1 {
					move.end_piece = cast() it
					array_add_unchecked(moves, move)
				}
			}

			mask = (piece_mask & black_pawn_promote_right_mask) & (white_pieces >> 9)
			while iterate_bits(*mask, *move.start) {
				move.end = move.start + 9

				for BLACK_KNIGHT .. BLACK_QUEEN + 1 {
					move.end_piece = cast() it
					array_add_unchecked(moves, move)
				}
			}
			
			move.start_piece_flags = BLACK_PAWN
			mask = (piece_mask & black_pawn_promote_mask) & ~(all_pieces >> 8)
			while iterate_bits(*mask, *move.start) {
				move.end = move.start + 8

				for BLACK_KNIGHT .. BLACK_QUEEN + 1 {
					move.end_piece = cast() it
					array_add_unchecked(moves, move)
				}
			}
		} else {
			mask = (piece_mask & black_pawn_up_one_mask) & ~(all_pieces >> 8)
			while iterate_bits(*mask, *move.start) {
				move.end = move.start + 8
				array_add_unchecked(moves, move)
			}
			
			move.end_piece = BLACK_PAWN_TWO
			mask = (piece_mask & black_pawn_up_two_mask) & ~(all_pieces >> 8) & ~(all_pieces >> 16)
			while iterate_bits(*mask, *move.start) {
				move.end = move.start + 16
				array_add_unchecked(moves, move)
			}
		}


		move.start_piece_flags = BLACK_KNIGHT
		move.end_piece = move.start_piece_flags
		piece_mask = pieces[move.start_piece_flags]
		#if capture_or_promotion {
			move.start_piece_flags |= Move.CAPTURE_FLAG
		}
		while iterate_bits(*piece_mask, *move.start) {
			mask = knight_mask[move.start]
			#if capture_or_promotion {
				mask &= white_pieces
			} else {
				mask &= ~all_pieces
			}

			while iterate_bits(*mask, *move.end)
				array_add_unchecked(moves, move)
		}


		move.start_piece_flags = BLACK_BISHOP
		move.end_piece = move.start_piece_flags
		piece_mask = pieces[move.start_piece_flags]
		#if capture_or_promotion {
			move.start_piece_flags |= Move.CAPTURE_FLAG
		}
		while iterate_bits(*piece_mask, *move.start) {
			mask = get_bishop_moves(move.start, all_pieces)
			#if capture_or_promotion {
				mask &= white_pieces
			} else {
				mask &= ~all_pieces
			}

			while iterate_bits(*mask, *move.end)
				array_add_unchecked(moves, move)
		}


		move.start_piece_flags = BLACK_ROOK
		move.end_piece = move.start_piece_flags
		piece_mask = pieces[move.start_piece_flags]
		#if capture_or_promotion {
			move.start_piece_flags |= Move.CAPTURE_FLAG
		}
		while iterate_bits(*piece_mask, *move.start) {
			mask = get_rook_moves(move.start, all_pieces)
			#if capture_or_promotion {
				mask &= white_pieces
			} else {
				mask &= ~all_pieces
			}

			while iterate_bits(*mask, *move.end)
				array_add_unchecked(moves, move)
		}


		move.start_piece_flags = BLACK_QUEEN
		move.end_piece = move.start_piece_flags
		piece_mask = pieces[move.start_piece_flags]
		#if capture_or_promotion {
			move.start_piece_flags |= Move.CAPTURE_FLAG
		}
		while iterate_bits(*piece_mask, *move.start) {
			mask = get_bishop_moves(move.start, all_pieces) | get_rook_moves(move.start, all_pieces)
			#if capture_or_promotion {
				mask &= white_pieces
			} else {
				mask &= ~all_pieces
			}


			while iterate_bits(*mask, *move.end)
				array_add_unchecked(moves, move)
		}


		move.start_piece_flags = BLACK_KING
		move.end_piece = move.start_piece_flags
		piece_mask = pieces[move.start_piece_flags]
		#if capture_or_promotion {
			move.start_piece_flags |= Move.CAPTURE_FLAG
		}
		move.start = cast() bit_scan_forward(pieces[BLACK_KING])
		mask = king_mask[move.start]
		#if capture_or_promotion {
			mask &= white_pieces
		} else {
			mask &= ~all_pieces
		}
		while iterate_bits(*mask, *move.end)
			array_add_unchecked(moves, move)

		#if !capture_or_promotion {
			if !(castle_state & .BLACK_NO_KINGSIDE) && !(all_pieces & black_kingside_castle_mask) 
				&& !look_for_checks_fast(state, all_pieces, 4, false) && !look_for_checks_fast(state, all_pieces, 5, false) {
				move.end = 6
				move.end_piece = BLACK_KINGSIDE_CASTLE
				array_add_unchecked(moves, move)
			}
			if !(castle_state & .BLACK_NO_QUEENSIDE) && !(all_pieces & black_queenside_castle_mask) 
				&& !look_for_checks_fast(state, all_pieces, 4, false) && !look_for_checks_fast(state, all_pieces, 3, false) {
				move.end = 2
				move.end_piece = BLACK_QUEENSIDE_CASTLE
				array_add_unchecked(moves, move)
			}
		}
	}
}

get_all_moves :: (using state: *State, moves: *[..]Move) {
	get_capture_moves(state, moves)
	get_non_capture_moves(state, moves)
}

get_all_legal_moves_slow :: (using state: *State, moves: *[..]Move) {
	get_all_moves(state, moves)

	for <<moves {
		_, valid := checked_do_move(state, it)

		if !valid
			remove
	}
}

get_non_capture_moves :: (using state: *State, moves: *[..]Move) {
	get_moves(state, moves, false)
}

get_capture_moves :: (using state: *State, moves: *[..]Move) {
	get_moves(state, moves, true)
}

Hashing_Data :: struct {
	piece_positions: [12][64]u64
	castle_state: [4]u64
	en_passant_file: [8]u64
	white_move: u64
}

hash ::  (using state: *State) -> u64 {
	result: u64 = 0
	
	for pieces {
		piece_mask := it
		location: s8

		while iterate_bits(*piece_mask, *location)
			result ^= hashing_data.piece_positions[it_index][location]
	}
	

	if castle_state & .WHITE_NO_KINGSIDE
		result ^= hashing_data.castle_state[0]
	if castle_state & .WHITE_NO_QUEENSIDE
		result ^= hashing_data.castle_state[1]
	if castle_state & .BLACK_NO_KINGSIDE
		result ^= hashing_data.castle_state[2]
	if castle_state & .BLACK_NO_QUEENSIDE
		result ^= hashing_data.castle_state[3]
	
	if en_passant_position
		result ^= hashing_data.en_passant_file[en_passant_position & 7]
	
	if white_move
		result ^= hashing_data.white_move
	
	return result
}

precompute_hashing_data :: () -> Hashing_Data {
	rng := create_random(10, 20)
	
	using data: Hashing_Data
	
	for * piece_positions {
		for * <<it {
			<<it = random_u64(*rng)
		} 
	}
	
	for * castle_state {
		<<it = random_u64(*rng)
	}
	
	for * en_passant_file {
		<<it = random_u64(*rng)
	}
	
	white_move = random_u64(*rng)
	
	return data
}

hashing_data :: #run precompute_hashing_data()

do_null_move :: (state: State) -> State {
	new_state := state
	new_state.move_count += 1
	new_state.ply += 1

	if new_state.en_passant_position {
		new_state.hash ^= hashing_data.en_passant_file[new_state.en_passant_position & 7]
	}

	new_state.en_passant_position = 0
	new_state.white_move = !state.white_move
	new_state.hash ^= hashing_data.white_move

	return new_state
}


do_move :: (state: *State, using move: Move) -> State {
	new_state := <<state
	new_state.move_count += 1
	new_state.ply += 1
	new_state.previous_move = move

	start_piece := start_piece_flags & Move.START_PIECE_MASK

	if new_state.en_passant_position {
		new_state.hash ^= hashing_data.en_passant_file[new_state.en_passant_position & 7]
	}

	new_state.en_passant_position = 0
	new_state.white_move = !state.white_move
	new_state.hash ^= hashing_data.white_move

	if start_piece == WHITE_PAWN || start_piece == BLACK_PAWN {
		new_state.move_count = 0
	}

	if end_piece == {
		case WHITE_PAWN_TWO
			new_state.pieces[WHITE_PAWN] &= ~(1 << cast(u64) start)
			new_state.pieces[WHITE_PAWN] |= (1 << cast(u64) end)

			if new_state.pieces[BLACK_PAWN] & en_passant_candidate_mask[end] {
				new_state.en_passant_position = start - 8
				new_state.hash ^= hashing_data.en_passant_file[new_state.en_passant_position & 7]
			}

			new_state.hash ^= hashing_data.piece_positions[WHITE_PAWN][start]
			new_state.hash ^= hashing_data.piece_positions[WHITE_PAWN][end]
			
			return new_state

		case BLACK_PAWN_TWO
			new_state.pieces[BLACK_PAWN] &= ~(1 << cast(u64) start)
			new_state.pieces[BLACK_PAWN] |= (1 << cast(u64) end)

			if new_state.pieces[WHITE_PAWN] & en_passant_candidate_mask[end] {
				new_state.en_passant_position = start + 8
				new_state.hash ^= hashing_data.en_passant_file[new_state.en_passant_position & 7]
			}

			new_state.hash ^= hashing_data.piece_positions[BLACK_PAWN][start]
			new_state.hash ^= hashing_data.piece_positions[BLACK_PAWN][end]
			
			return new_state

		case WHITE_EN_PASSANT
			new_state.pieces[WHITE_PAWN] &= ~(1 << cast(u64) start)
			new_state.pieces[WHITE_PAWN] |= (1 << cast(u64) end)
			new_state.pieces[BLACK_PAWN] &= ~(1 << cast(u64) (end + 8))

			new_state.hash ^= hashing_data.piece_positions[WHITE_PAWN][start]
			new_state.hash ^= hashing_data.piece_positions[WHITE_PAWN][end]
			new_state.hash ^= hashing_data.piece_positions[BLACK_PAWN][end + 8]
			
			return new_state

		case BLACK_EN_PASSANT
			new_state.pieces[BLACK_PAWN] &= ~(1 << cast(u64) start)
			new_state.pieces[BLACK_PAWN] |= (1 << cast(u64) + end)
			new_state.pieces[WHITE_PAWN] &= ~(1 << cast(u64) (end - 8))

			new_state.hash ^= hashing_data.piece_positions[BLACK_PAWN][start]
			new_state.hash ^= hashing_data.piece_positions[BLACK_PAWN][end]
			new_state.hash ^= hashing_data.piece_positions[WHITE_PAWN][end - 8]
			
			return new_state

		case WHITE_KINGSIDE_CASTLE
			new_state.pieces[WHITE_KING] = 1 << 62
			new_state.pieces[WHITE_ROOK] &= cast() ~(1 << 63)
			new_state.pieces[WHITE_ROOK] |= (1 << 61)

			new_state.hash ^= hashing_data.piece_positions[WHITE_KING][62]
			new_state.hash ^= hashing_data.piece_positions[WHITE_KING][60]
			new_state.hash ^= hashing_data.piece_positions[WHITE_ROOK][63]
			new_state.hash ^= hashing_data.piece_positions[WHITE_ROOK][61]
			
			if !(new_state.castle_state & .WHITE_NO_QUEENSIDE)
				new_state.hash ^= hashing_data.castle_state[1]
			new_state.hash ^= hashing_data.castle_state[0] // If we kingside castle we must have had kingside castling rights
			
			new_state.castle_state |= .WHITE_NO_KINGSIDE
			new_state.castle_state |= .WHITE_NO_QUEENSIDE
			
			return new_state

		case WHITE_QUEENSIDE_CASTLE
			new_state.pieces[WHITE_KING] = 1 << 58
			new_state.pieces[WHITE_ROOK] &= cast() ~(1 << 56)
			new_state.pieces[WHITE_ROOK] |= (1 << 59)

			new_state.hash ^= hashing_data.piece_positions[WHITE_KING][58]
			new_state.hash ^= hashing_data.piece_positions[WHITE_KING][60]
			new_state.hash ^= hashing_data.piece_positions[WHITE_ROOK][59]
			new_state.hash ^= hashing_data.piece_positions[WHITE_ROOK][56]
			
			
			if !(new_state.castle_state & .WHITE_NO_KINGSIDE)
				new_state.hash ^= hashing_data.castle_state[0]
			new_state.hash ^= hashing_data.castle_state[1] // If we queenside castle we must have had queenside castling rights
			
			new_state.castle_state |= .WHITE_NO_KINGSIDE
			new_state.castle_state |= .WHITE_NO_QUEENSIDE
			
			return new_state

		case BLACK_KINGSIDE_CASTLE
			new_state.pieces[BLACK_KING] = 1 << 6
			new_state.pieces[BLACK_ROOK] &= cast() ~(1 << 7)
			new_state.pieces[BLACK_ROOK] |= (1 << 5)

			new_state.hash ^= hashing_data.piece_positions[BLACK_KING][6]
			new_state.hash ^= hashing_data.piece_positions[BLACK_KING][4]
			new_state.hash ^= hashing_data.piece_positions[BLACK_ROOK][7]
			new_state.hash ^= hashing_data.piece_positions[BLACK_ROOK][3]
			
			
			if !(new_state.castle_state & .BLACK_NO_QUEENSIDE)
				new_state.hash ^= hashing_data.castle_state[3]
			new_state.hash ^= hashing_data.castle_state[2] // If we kingside castle we must have had queenside castling rights
			
			new_state.castle_state |= .BLACK_NO_KINGSIDE
			new_state.castle_state |= .BLACK_NO_QUEENSIDE
			
			return new_state
			
		case BLACK_QUEENSIDE_CASTLE
			new_state.pieces[BLACK_KING] = 1 << 2
			new_state.pieces[BLACK_ROOK] &= cast() ~(1 << 0)
			new_state.pieces[BLACK_ROOK] |= (1 << 3)

			new_state.hash ^= hashing_data.piece_positions[BLACK_KING][2]
			new_state.hash ^= hashing_data.piece_positions[BLACK_KING][4]
			new_state.hash ^= hashing_data.piece_positions[BLACK_ROOK][3]
			new_state.hash ^= hashing_data.piece_positions[BLACK_ROOK][0]
			
			
			if !(new_state.castle_state & .BLACK_NO_KINGSIDE)
				new_state.hash ^= hashing_data.castle_state[2]
			new_state.hash ^= hashing_data.castle_state[3] // If we queenside castle we must have had queenside castling rights
			
			new_state.castle_state |= .BLACK_NO_KINGSIDE
			new_state.castle_state |= .BLACK_NO_QUEENSIDE

			return new_state
			
		case BLACK_ROOK
				
			if move.start == 0 && !(new_state.castle_state & .BLACK_NO_QUEENSIDE) {
				new_state.castle_state |= .BLACK_NO_QUEENSIDE
				new_state.hash ^= hashing_data.castle_state[3]
			}
			if move.start == 7 && !(new_state.castle_state & .BLACK_NO_KINGSIDE) {
				new_state.castle_state |= .BLACK_NO_KINGSIDE
				new_state.hash ^= hashing_data.castle_state[2]
			}
		case WHITE_ROOK
		
			if move.start == 56 && !(new_state.castle_state & .WHITE_NO_QUEENSIDE) {
				new_state.castle_state |= .WHITE_NO_QUEENSIDE
				new_state.hash ^= hashing_data.castle_state[1]
			}
			if move.start == 63 && !(new_state.castle_state & .WHITE_NO_KINGSIDE) {
				new_state.castle_state |= .WHITE_NO_KINGSIDE
				new_state.hash ^= hashing_data.castle_state[0]
			}
		case BLACK_KING
			if !(new_state.castle_state & .BLACK_NO_QUEENSIDE) {
				new_state.hash ^= hashing_data.castle_state[3]
			}
			if !(new_state.castle_state & .BLACK_NO_KINGSIDE) {
				new_state.hash ^= hashing_data.castle_state[2]
			}
			
			new_state.castle_state |= .BLACK_NO_QUEENSIDE
			new_state.castle_state |= .BLACK_NO_KINGSIDE
		
		case WHITE_KING
			if !(new_state.castle_state & .WHITE_NO_QUEENSIDE) {
				new_state.hash ^= hashing_data.castle_state[1]
			}
			if !(new_state.castle_state & .WHITE_NO_KINGSIDE) {
				new_state.hash ^= hashing_data.castle_state[0]
			}
			
			new_state.castle_state |= .WHITE_NO_QUEENSIDE
			new_state.castle_state |= .WHITE_NO_KINGSIDE
		
	}
	
	new_state.pieces[start_piece] &= ~(1 << cast(u64) start)

	new_state.hash ^= hashing_data.piece_positions[start_piece][start]
	new_state.hash ^= hashing_data.piece_positions[end_piece][end]

	if start_piece_flags & Move.CAPTURE_FLAG {
		captured := get_colored_piece(*new_state, end, new_state.white_move)
		
		new_state.move_count = 0
		new_state.pieces[captured] &= ~(1 << cast(u64) end)
		new_state.hash ^= hashing_data.piece_positions[captured][end]
		
			
		if move.end == 0 && !(new_state.castle_state & .BLACK_NO_QUEENSIDE) {
			new_state.castle_state |= .BLACK_NO_QUEENSIDE
			new_state.hash ^= hashing_data.castle_state[3]
		}
		if move.end == 7 && !(new_state.castle_state & .BLACK_NO_KINGSIDE) {
			new_state.castle_state |= .BLACK_NO_KINGSIDE
			new_state.hash ^= hashing_data.castle_state[2]
		}
		if move.end == 56 && !(new_state.castle_state & .WHITE_NO_QUEENSIDE) {
			new_state.castle_state |= .WHITE_NO_QUEENSIDE
			new_state.hash ^= hashing_data.castle_state[1]
		}
		if move.end == 63 && !(new_state.castle_state & .WHITE_NO_KINGSIDE) {
			new_state.castle_state |= .WHITE_NO_KINGSIDE
			new_state.hash ^= hashing_data.castle_state[0]
		}
	}

	new_state.pieces[move.end_piece] |= (1 << cast(u64) end)

	return new_state
}