#import "Window"
#import "GL"
#import "Standard"
#import "Math"
#import "Sound"
#import "Random"

rng: Random_State

should_quit: bool

window: *Window
gl_context: GL_Context

TAU:        f32: 6.2831853
INV_SQRT_2: f32: 0.70710678
SEMITONE:   f32: 1.0594631
C1:         f32: 32.70

SAMPLE_PERIOD: f32: 1.0 / SAMPLE_RATE 

current_sample_index: u64

sinf :: (val: f32) -> f32 #external "c"
fmodf :: (a: f32, b: f32) -> f32 #external "c"
powf :: (base: f32, exponent: f32) -> f32 #external "c"

sine :: (sample_index: u64, f: f32) -> f32 {
    t := cast() sample_index * f * TAU * SAMPLE_PERIOD
    return sinf(t)
}

square :: (sample_index: u64, f: f32) -> f32 {
    t := cast() sample_index * f * SAMPLE_PERIOD
    
    fractional := fmodf(t, 1)
    if fractional < 0.5
        return -1
    else
        return 1
}

sawtooth :: (sample_index: u64, f: f32) -> f32 {
    t := cast() sample_index * f * SAMPLE_PERIOD
    
    fractional := fmodf(t, 1)
    return fractional * 2 - 1
}

triangle :: (sample_index: u64, f: f32) -> f32 {
    t := cast() sample_index * f * SAMPLE_PERIOD
    
    fractional := fmodf(t, 1)
    
    if fractional < 0.5
        return fractional * 4 - 1
    else
        return fractional * -4 + 3
}

modulate :: (sample: f32, modulate_by: f32, modulation_strength: f32 = 1.0) -> f32 {
    modulate_factor := modulate_by * 0.5 + 0.5
    modulate_factor *= modulation_strength
    modulate_factor += (1 - modulation_strength)

    return sample * modulate_factor
}

random :: () -> f32 {
    return random_bilateral(*rng)
}

//  C            C#      D    D#   E    F    F#   G    G#   A           A#                    B
NOTE_KEYS :: Key.[
    .CONTROL,    .SHIFT, .Z,  .X,  .C,  .V,  .B,  .N,  .M,  .COMMA,     .PERIOD,              .SLASH, 
    .A,          .S,     .D,  .F,  .G,  .H,  .J,  .K,  .L,  .SEMICOLON, .QUOTE,               .ENTER, 
    .Q,          .W,     .E,  .R,  .T,  .Y,  .U,  .I,  .O,  .P,         .LEFT_SQUARE_BRACKET, .RIGHT_SQUARE_BRACKET, 
    ._1,         ._2,    ._3, ._4, ._5, ._6, ._7, ._8, ._9, ._0,        .MINUS,               .PLUS, 
    .F1,         .F2,    .F3, .F4, .F5, .F6, .F7, .F8, .F9, .F10,       .F11,                 .F12
]

current_notes: [NOTE_KEYS.count]Adsr_Data

quantize :: (sample: f32) -> s16 { 
    return cast() (clamp(sample, -1, 1) * 32767)
}

Adsr_Data :: struct {
    attack_rate:      f32 = 120
    decay_rate:       f32 = 80
    release_rate:     f32 = 30
    attack_amplitude: f32 = 2
    was_pressed: bool
    value: f32
    attacking: bool
}

advance_adsr :: (using data: *Adsr_Data, pressed: bool) -> f32 {
    if pressed {
        if !was_pressed
            attacking = true
            
        if attacking {
            value += attack_rate * SAMPLE_PERIOD
            
            if value >= attack_amplitude {
                value = attack_amplitude
                attacking = false
            }
        } else {
            value -= decay_rate * SAMPLE_PERIOD
            value = max(value, 1)
        }
    } else {
        attacking = false
        value -= release_rate * SAMPLE_PERIOD
        value = max(value, 0)
    }
    
    was_pressed = pressed
    return value
}

delay_buffer: [SAMPLE_RATE]f32

get_delay_buffer :: (sample_index: u64) -> *f32 {
    index := sample_index
    
    if index < 0 index += delay_buffer.count
    
    index %= delay_buffer.count
    
    return *delay_buffer[index]
}


fill_samples :: (samples: []Sample, sample_index: u64) {
    current_sample_index := sample_index

    for * samples {
        i := sample_index + it_index
        
        sample_value: f32 = 0.0
        
        for NOTE_KEYS {
            frequency := C1 * powf(SEMITONE, cast() it_index)
            sample_value += 0.05 * advance_adsr(*current_notes[it_index], window.keys[cast(u8) it]) 
                * triangle(i, frequency);
        }

        sample_value += <<get_delay_buffer(i - 10) * 0.15
        sample_value += <<get_delay_buffer(i - 13) * 0.15
        sample_value += <<get_delay_buffer(i - 31) * 0.15
        sample_value += <<get_delay_buffer(i - 47) * 0.15
        sample_value += <<get_delay_buffer(i - 91) * 0.15;

        <<get_delay_buffer(i) = sample_value
        
        it.left  = quantize(sample_value)
        it.right = quantize(sample_value)
    }
}    


main :: () {
    rng = create_random(1, 1)

    window = create_window("Synth", 1600, 900)
    
    if !window {
        print("Failed to create window\n")
        return
    }
    
    success: bool
    success, gl_context = create_gl(window, depth_bits = 0)
    
    if !success {
        print("Failed to create gl context\n")
        return
    }
    
    
    make_context_current(gl_context)
    
    load_gl_extensions()
    
    if !success {
        print("Failed to load gl extensions\n")
        return
    }
    
    if !initialize_sound(window.handle, fill_samples, 2, 0.01) {
        print("Failed to initialize sound\n")
        return
    }
    
    last_time := get_performance_timer()
    
    show_window(window)
    
    
    set_swap_interval(0)
    
    while poll_events(window) {
        current_time := get_performance_timer()
        delta := cast(f32) (current_time - last_time)
        last_time = current_time
        
        for get_window_events(window) {
            if it.kind == .CLOSE {
            }
        }
    
        glViewport(0, 0, window.width, window.height)
        glClearColor(0, 0.1, 0.2, 0)
        glClear(GL_COLOR_BUFFER_BIT)
        
        glMatrixMode(GL_PROJECTION)
        glLoadIdentity()
        glOrtho(0, cast() window.width, 0, cast() window.height, -5, 5)
    
        if delta >= 0.005 {
            print("%\n", delta)
        }
    
        fill_sound()
        
        swap_buffers(gl_context)
    }
}

#import "Compiler"

setup_build :: () {
    arguments := get_build_arguments()
    
    if arguments {
        options := get_build_options()
        options.backend = .LLVM
        options.llvm_options = arguments
        
        set_build_options(options)
    }
}

#run setup_build()