#import "Standard"
#import "Window"
#import "GL"
#import "stb_truetype"
#import "File"
#import "Windows"
#import "String"

#load "editor.milo"
#load "editor_controls.milo"
#load "commands.milo"
#load "graphics.milo"
#load "parsing.milo"

File_Session_Info :: struct {
    version := 2
    filename: string
    cursor: u64
    scroll_x:   f32
    scroll_y:   f32
}

Config_Info :: struct {
    version := 2
    placement: WINDOWPLACEMENT
    current_tab: u64
    tabs: []File_Session_Info
}

settings_size :: (using settings: any) -> u64 {
    if value_type.tag == {
        case .STRING
            text := cast(string) settings
            
            return size_of(u64) + text.count
        case .STRUCT
            total_size: u64 = 0
            
            struct_ := cast(*Type_Info_Struct) value_type
            
            for struct_.members {
                total_size += settings_size(.{value_pointer + it.offset, it.member_type})
            }
            
            return total_size
        case .ARRAY
            array := cast(*Type_Info_Array) settings.value_type
            
            
            
            if array.flavor == .FIXED {
                values := cast([1]u8) settings
                
                total_size: u64 = 0
                
                for array.count {
                    total_size += settings_size(.{values.data + it_index * array.element_type.size, array.element_type})
                }
                return total_size
            } else {
                values := cast([]u8) settings
                
                total_size: u64 = size_of(u64)
                
                for values.count {
                    total_size += settings_size(.{values.data + it_index * array.element_type.size, array.element_type})
                }
                return total_size
            }
        else
            return value_type.size
    }
}

serialize_settings :: (using settings: any, dest: *u8) -> *u8 {
    if value_type.tag == {
        case .STRING
            text := cast(string) settings
            
            memory_copy(dest, *text.count, size_of(u64))
            memory_copy(dest + size_of(u64), text.data, text.count)
            
            return dest + text.count + size_of(u64)
        case .STRUCT
            struct_ := cast(*Type_Info_Struct) value_type
            
            dest_ := dest
            for struct_.members {
                dest_ = serialize_settings(.{value_pointer + it.offset, it.member_type}, dest_)
            }
            
            return dest_
        case .ARRAY
            array := cast(*Type_Info_Array) value_type
            
            if array.flavor == .FIXED {
                values := cast([1]u8) settings
                
                dest_ := dest
                
                for array.count {
                    offset := it * array.element_type.size
                
                    dest_ = serialize_settings(.{values.data + offset, array.element_type}, dest_)
                }
                
                return dest_
            } else {
                values := cast([]u8) settings
                
                memory_copy(dest, *values.count, size_of(u64))
                dest_ := dest + size_of(u64)
                
                for values.count {
                    offset := it * array.element_type.size
                
                    dest_ = serialize_settings(.{values.data + offset, array.element_type}, dest_)
                }
                
                return dest_
            }
        else
            memory_copy(dest, value_pointer, value_type.size)
            return dest + value_type.size
    }
}

deserialize_settings :: (using settings: any, source: *u8) -> *u8 {
    if value_type.tag == {
        case .STRING
            text := cast(*string) settings.value_pointer;
            
            count := <<cast(*u64) source;
            
            <<text = new_string(count, initialized = false)
            memory_copy(text.data, source + size_of(u64), text.count)
            
            return source + size_of(u64) + text.count
        case .STRUCT
            struct_ := cast(*Type_Info_Struct) value_type
            
            source_ := source
            
            for struct_.members {
                if it_index == 0 && it.name == "version" && it.member_type.size == 8
                    if <<cast(*u64) it.initial_value != <<cast(*u64) source_
                        return null
            
                source_ = deserialize_settings(.{value_pointer + it.offset, it.member_type}, source_)
                
                if !source_
                    return null
            }
            
            return source_
        case .ARRAY
            array := cast(*Type_Info_Array) value_type
            
            if array.flavor == .FIXED {
                values := cast(*[1]u8) settings.value_pointer;
                
                source_ := source
                
                for array.count {
                    offset := it * array.element_type.size
                
                    source_ = deserialize_settings(.{values.data + offset, array.element_type}, source_)
                    if !source_
                        return null
                }
                
                return source_
            } else {
                values := cast(*[]u8) settings.value_pointer;
                
                count := <<cast(*u64) source;
                
                <<values = new_array(u8, count * array.element_type.size, initialized = false)
                values.count = count
                
                source_ := source + size_of(u64)
                
                for values.count {
                    offset := it * array.element_type.size
                
                    source_ = deserialize_settings(.{values.data + offset, array.element_type}, source_)
                    if !source_
                        return null
                }
                
                return source_
            }
        else
            memory_copy(value_pointer, source, value_type.size)
            return source + value_type.size
    }
}

save :: (using tab: *Tab) {
    using file_editor
    success := write_entire_file(filename, text)
    
    if !success {
        print("Failed to save to %\n", filename)
        return;
    }
    
    save_change_index = change_count
}

save_session :: (config_file: string) {
    config: Config_Info
    
    GetWindowPlacement(window.handle, *config.placement)
    config.current_tab = current_tab
    config.tabs = new_array(File_Session_Info, tabs.count)
    
    for * config.tabs {
        it.filename = tabs[it_index].filename
        it.cursor   = tabs[it_index].file_editor.cursor
        it.scroll_x = tabs[it_index].file_editor.scroll_x
        it.scroll_y = tabs[it_index].file_editor.scroll_y
    }
    
    buffer := new_array(u8, settings_size(config), initialized = false)
    defer free_array(buffer)
    
    serialize_settings(config, buffer.data)
    write_entire_file(config_file, buffer)
}

load_session :: (config_file: string) {
    buffer, success := read_entire_file(config_file)
    defer free_array(buffer)
    
    if !success
        return;
    
    config: Config_Info
    
    if !deserialize_settings(.{*config, type_info(type_of(config))}, buffer.data)
        return;
    
    defer free_array(config.tabs)
    
    for config.tabs {
        tab := load(it.filename)
        
        tab.file_editor.cursor    = min(it.cursor, tab.file_editor.text.count)
        tab.file_editor.selection = tab.file_editor.cursor
        tab.file_editor.scroll_x  = it.scroll_x
        tab.file_editor.scroll_y  = it.scroll_y
        
        array_add(*tabs, tab)
    }
    update_tab_bounds()
    
    current_tab = config.current_tab
    
    SetWindowPlacement(window.handle, *config.placement)
    
    if IsIconic(window.handle) {
        bring_to_top(window)
    }
}

load :: (filename_: string) -> *Tab {
    using result := new(Tab)
    set_editor_text(*command_editor, "")
    set_editor_text(*file_editor, "")

    new_text, success := read_entire_file(filename_)
    defer free_array(new_text)
    
    if !success 
        return result
        
    filename = filename_
    
    normalised := normalise_text(cast() new_text)
    defer array_free(normalised)
    
    set_editor_text(*file_editor, cast() cast([]u8) normalised)
    
    return result
}

window: *Window
gl_context: GL_Context

Tab :: struct {
    file_editor:    Editor
    command_editor: Editor
    editor_label: string
    filename:     string
    
    display_name: string
    rect: Rectangle
    
    command_state: Command_State
}

tabs: [..]*Tab
current_tab: u64 = 0

active_editor :: (using tab: *Tab) -> *Editor {
    if command_state == .NONE
        return *file_editor
    else
        return *command_editor
}

PIPE_NAME :: "\\\\.\\pipe\\milo_edit-70663138"
open_existing_instance :: (full_path: string) {
    handle := CreateFileA(PIPE_NAME.data, GENERIC_WRITE, 0, null, OPEN_EXISTING, 0, null)
    
    if handle == INVALID_HANDLE_VALUE
        return;
    defer CloseHandle(handle)
    
    count := full_path.count
    WriteFile(handle, *count, size_of(type_of(count)), null, null)
    WriteFile(handle, full_path.data, cast() count, null, null)
}

receive_pipe: HANDLE
pipe_connect_overlapped: OVERLAPPED

open_or_load_tab :: (filename: string) {
    for tabs {
        if it.filename == filename {
            current_tab = it_index
            break
        }
    } or {
        array_add(*tabs, load(filename))
        current_tab = tabs.count - 1
        update_tab_bounds()
    }
}

check_pipe_for_file_open :: () -> bool {
    num_bytes: u32
    if !GetOverlappedResult(receive_pipe, *pipe_connect_overlapped, *num_bytes, 0)
        return false
    
    count: u64
    
    if !ReadFile(receive_pipe, *count, size_of(type_of(count)), *num_bytes) || num_bytes != size_of(type_of(count))
        return false
        
    new_filename := new_string(count, initialized = false)
        
    if !ReadFile(receive_pipe, new_filename.data, cast() count, *num_bytes) || num_bytes != count {
        free_string(new_filename)
        return false
    }
    
    DisconnectNamedPipe(receive_pipe, null)
    ConnectNamedPipe(receive_pipe, *pipe_connect_overlapped)
    
    open_or_load_tab(new_filename)
    bring_to_top(window)
    
    ConnectNamedPipe(receive_pipe, *pipe_connect_overlapped)
    
    return true
}

update_tab_bounds :: () {
    
    display_names := new_array(u64, tabs.count)
    defer free_array(display_names)
    
    for tabs {
        display_names[it_index] = find_last(it.filename, '\\') + 1
    }
    
    identical_names: [..]u64
    defer array_free(identical_names)
    
    while outer: true {
        for tabs {
            name := it.filename[display_names[it_index]..]
            
            for tabs
                if name == it.filename[display_names[it_index]..]
                    array_add(*identical_names, it_index)
            
            if identical_names.count >= 2 {
                for identical_names {
                    display_names[it] = find_last(tabs[it].filename[..display_names[it] - 1], '\\') + 1
                }
            }
            
            identical_names.count = 0
        }
        
        break
    }
    
    top: f32 = 0
    bottom: f32 = font.height + 2 * MARGIN 
    
    x: f32 = 0
    for tabs {
        it.display_name = it.filename[display_names[it_index]..]
        
        it.rect.top = top
        it.rect.left = x
        it.rect.bottom = bottom
        it.rect.right = x + cast() (it.display_name.count + 1) * font.width + 3 * MARGIN
        
        x = it.rect.right
    }
}

rectangle_contains :: (using rectangle: Rectangle, x: f32, y: f32) -> bool {
    return top <= y && y < bottom && left <= x && x < right
}

tab_is_saved :: (using tab: *Tab) -> bool {
    return file_editor.save_change_index == file_editor.change_count
}

close_tab :: (index: u64) {
    using tab := tabs[index]
    
    free_editor(file_editor)
    free_editor(command_editor)
    free_string(filename)
    free(tab)

    tabs.count -= 1

    for * tabs[index .. tabs.count] {
        it[0] = it[1]
    }
    
    if tabs.count == 0 {
        close_window(window)
    } else if current_tab == index {
        current_tab = tabs.count - 1
    }
    
    update_tab_bounds()
}

go_to_next_unsaved_tab :: () -> bool {
    while tabs.count {
        if tab_is_saved(tabs[0]) {
            close_tab(0)
        } else {
            current_tab = 0
            return true
        }
    }
    
    return false
}

steal_command_editor :: (using tab: *Tab) -> Editor {
    result := command_editor
    command_editor = .{}
    set_editor_text(*command_editor, "")
    
    return result
}

main :: () {

    AttachConsole(ATTACH_PARENT_PROCESS)
    
    args := get_command_line_arguments()
    
    if args.count > 2 {
        print("Usage: % <filename>", args[0])
        print("       %",            args[0])
        return;
    }
    
    full_path := ""
    
    if args.count >= 2
        full_path = get_full_path(args[1])
    
    receive_pipe = CreateNamedPipeA(PIPE_NAME.data, 
                                     PIPE_ACCESS_INBOUND | cast() FILE_FLAG_FIRST_PIPE_INSTANCE | cast() FILE_FLAG_OVERLAPPED, 
                                     PIPE_TYPE_MESSAGE | PIPE_READMODE_MESSAGE | PIPE_WAIT | PIPE_REJECT_REMOTE_CLIENTS, 
                                     1, 0, 64 * 1024)
                                     
    if receive_pipe == INVALID_HANDLE_VALUE {
        if full_path {
            open_existing_instance(full_path)
        }
        return
    }
    defer CloseHandle(receive_pipe)
    
    ConnectNamedPipe(receive_pipe, *pipe_connect_overlapped)
                                     
    
    window = create_window("Milo Edit", 1600, 900)
    window.draw = draw
    window.destroy_on_close = false
    
    text_cursor  := LoadCursorW(null, IDC_IBEAM)
    arrow_cursor := LoadCursorW(null, IDC_ARROW)
    
    current_cursor := arrow_cursor
    
    icon := LoadImageW(null, to_windows_string(get_path_relative_to_executable("milo_edit.ico")).data, IMAGE_ICON, 0, 0, LR_DEFAULTSIZE | LR_LOADFROMFILE)
    SetClassLongPtrW(window.handle, GCLP_HICON, cast() icon)
    SetTimer(window.handle, 1, 10)
    
    config_file := get_path_relative_to_executable("milo_edit.mecfg")
    
    success: bool
    success, gl_context = create_gl(window, depth_bits = 0)
    
    if !success {
        print("Failed to create gl context")
        return
    }

    make_context_current(gl_context)

    load_gl_extensions()
    
    glEnable(GL_TEXTURE_2D)
    
    glEnable(GL_BLEND)
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)
    
    glEnableClientState(GL_VERTEX_ARRAY)
    glEnableClientState(GL_COLOR_ARRAY)
    
    if !load_font() {
        print("Failed to load font")
        return        
    }
    
    last_cursor_active := false
    
    show_window(window)
    
    load_session(config_file)
    
    if full_path
        open_or_load_tab(full_path)

    if !tabs.count
        return;
    
    while outer: wait_events(window) {
        redraw_needed := window.events.count != 0
        
        redraw_needed |= check_pipe_for_file_open()
    
        for event: get_window_events(window) {
            using tab := tabs[current_tab]
            if event.kind == {
                case .CLOSE
                    if command_state == .SAVE_BEFORE_CLOSE_ALL {
                        close_window(window)
                    } else {
                        save_session(config_file)
                    
                        current_tab = 0
                        
                        if !go_to_next_unsaved_tab() {
                            close_window(window)
                        } else {
                            bring_to_top(window)
                            activate_command_editor(tabs[current_tab], .SAVE_BEFORE_CLOSE_ALL, SAVE_BEFORE_CLOSE_TEXT, "y")   
                        }
                    }
                case .KEY {
                    if command_state == .NONE
                        editor_event(tab, *file_editor, event)
                    else 
                        command_editor_event(tab, event)
                } 
                case .SCROLL
                    editor_event(tab, *file_editor, event)
                case .MOUSE {
                    using event.mouse
                    
                    if rectangle_contains(active_editor(tab).bounds, cast() x, cast() y)
                        editor_event(tab, active_editor(tab), event)
                    else if command_state != .SAVE_BEFORE_CLOSE_ALL && command_state != .SAVE_BEFORE_CLOSE {
                        for tabs {
                            if (!down && button == .LEFT_MOUSE   && tab_x_button_contains(it,   cast() x, cast() y)) || 
                               (!down && button == .MIDDLE_MOUSE && rectangle_contains(it.rect, cast() x, cast() y)) {
                                if tab_is_saved(tabs[it_index]) {
                                    close_tab(it_index)
                                } else {
                                    current_tab = it_index
                                    activate_command_editor(tabs[it_index], .SAVE_BEFORE_CLOSE, SAVE_BEFORE_CLOSE_TEXT, "y")
                                }
                                
                                break
                            } else if down && button == .LEFT_MOUSE && rectangle_contains(it.rect, cast() x, cast() y) {
                                current_tab = it_index
                                break
                            }
                        }
                    }
                }
                else
                    editor_event(tab, active_editor(tab), event) 
            }
            
            if current_tab >= tabs.count
                break outer
        }
        
        active_cursor := cursor_should_be_active(active_editor(tabs[current_tab]))
        redraw_needed |= last_cursor_active != active_cursor
        
        if redraw_needed {
            using tab := tabs[current_tab]
            
            cursor := arrow_cursor
            
            if rectangle_contains(tab.file_editor.bounds, cast() window.mouse_x, cast() window.mouse_y) || 
                (tab.command_state != .NONE && rectangle_contains(tab.command_editor.bounds, cast() window.mouse_x, cast() window.mouse_y))
                cursor = text_cursor
            
            if cursor != current_cursor {
                current_cursor = cursor
                SetClassLongPtrW(window.handle, GCLP_HCURSOR, cast() cursor)
                pos: POINT
                GetCursorPos(*pos)
                SetCursorPos(pos.x, pos.y)
            }
        
            last_cursor_active = active_cursor
            draw()
            set_swap_interval(1)
        }
    }
}

#import "Compiler"

#run {
    build_options := get_build_options()
    
    build_options.c_runtime_library = Build_Options.C_Runtime_Library.DYNAMIC | .FORCED
    
    arguments := get_build_arguments()
    if arguments.count && arguments[0] == "-release" {
        build_options.backend = .LLVM
        build_options.llvm_options = .["-O3"]
        build_options.show_console = false
    }
    
    build_options.icon_name = "milo_edit.ico"
    
    set_build_options(build_options)
}